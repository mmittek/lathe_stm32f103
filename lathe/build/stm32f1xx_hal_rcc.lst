ARM GAS  C:\Users\MATEUS~1\AppData\Local\Temp\ccmMuE16.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"stm32f1xx_hal_rcc.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.HAL_RCC_DeInit,"ax",%progbits
  20              		.align	2
  21              		.global	HAL_RCC_DeInit
  22              		.thumb
  23              		.thumb_func
  25              	HAL_RCC_DeInit:
  26              	.LFB64:
  27              		.file 1 "Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c"
   1:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** /**
   2:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   ******************************************************************************
   3:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @file    stm32f1xx_hal_rcc.c
   4:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @author  MCD Application Team
   5:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @brief   RCC HAL module driver.
   6:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *          This file provides firmware functions to manage the following 
   7:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *          functionalities of the Reset and Clock Control (RCC) peripheral:
   8:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *           + Initialization and de-initialization functions
   9:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *           + Peripheral Control functions
  10:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *       
  11:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   @verbatim                
  12:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   ==============================================================================
  13:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****                       ##### RCC specific features #####
  14:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   ==============================================================================
  15:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     [..]  
  16:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       After reset the device is running from Internal High Speed oscillator
  17:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       (HSI 8MHz) with Flash 0 wait state, Flash prefetch buffer is enabled, 
  18:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       and all peripherals are off except internal SRAM, Flash and JTAG.
  19:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       (+) There is no prescaler on High speed (AHB) and Low speed (APB) buses;
  20:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           all peripherals mapped on these buses are running at HSI speed.
  21:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       (+) The clock for all peripherals is switched off, except the SRAM and FLASH.
  22:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       (+) All GPIOs are in input floating state, except the JTAG pins which
  23:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           are assigned to be used for debug purpose.
  24:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     [..] Once the device started from reset, the user application has to:
  25:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       (+) Configure the clock source to be used to drive the System clock
  26:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           (if the application needs higher frequency/performance)
  27:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       (+) Configure the System clock frequency and Flash settings  
  28:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       (+) Configure the AHB and APB buses prescalers
  29:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       (+) Enable the clock for the peripheral(s) to be used
  30:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       (+) Configure the clock source(s) for peripherals whose clocks are not
  31:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           derived from the System clock (I2S, RTC, ADC, USB OTG FS) 
ARM GAS  C:\Users\MATEUS~1\AppData\Local\Temp\ccmMuE16.s 			page 2


  32:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
  33:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****                       ##### RCC Limitations #####
  34:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   ==============================================================================
  35:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     [..]  
  36:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       A delay between an RCC peripheral clock enable and the effective peripheral 
  37:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       enabling should be taken into account in order to manage the peripheral read/write 
  38:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       from/to registers.
  39:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       (+) This delay depends on the peripheral mapping.
  40:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         (++) AHB & APB peripherals, 1 dummy read is necessary
  41:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
  42:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     [..]  
  43:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       Workarounds:
  44:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       (#) For AHB & APB peripherals, a dummy read to the peripheral register has been
  45:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           inserted in each __HAL_RCC_PPP_CLK_ENABLE() macro.
  46:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
  47:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   @endverbatim
  48:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   ******************************************************************************
  49:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @attention
  50:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *
  51:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * <h2><center>&copy; COPYRIGHT(c) 2016 STMicroelectronics</center></h2>
  52:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *
  53:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * Redistribution and use in source and binary forms, with or without modification,
  54:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * are permitted provided that the following conditions are met:
  55:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *   1. Redistributions of source code must retain the above copyright notice,
  56:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *      this list of conditions and the following disclaimer.
  57:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  58:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *      this list of conditions and the following disclaimer in the documentation
  59:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *      and/or other materials provided with the distribution.
  60:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  61:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *      may be used to endorse or promote products derived from this software
  62:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *      without specific prior written permission.
  63:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *
  64:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  65:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  66:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  67:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  68:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  69:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  70:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  71:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  72:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  73:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  74:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *
  75:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   ******************************************************************************  
  76:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** */
  77:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   
  78:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** /* Includes ------------------------------------------------------------------*/
  79:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** #include "stm32f1xx_hal.h"
  80:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
  81:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** /** @addtogroup STM32F1xx_HAL_Driver
  82:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @{
  83:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   */
  84:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
  85:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** /** @defgroup RCC RCC
  86:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** * @brief RCC HAL module driver
  87:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @{
  88:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   */
ARM GAS  C:\Users\MATEUS~1\AppData\Local\Temp\ccmMuE16.s 			page 3


  89:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
  90:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** #ifdef HAL_RCC_MODULE_ENABLED
  91:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
  92:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** /* Private typedef -----------------------------------------------------------*/
  93:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** /* Private define ------------------------------------------------------------*/
  94:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** /** @defgroup RCC_Private_Constants RCC Private Constants
  95:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****  * @{
  96:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****  */
  97:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** /**
  98:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @}
  99:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   */
 100:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** /* Private macro -------------------------------------------------------------*/
 101:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** /** @defgroup RCC_Private_Macros RCC Private Macros
 102:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @{
 103:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   */
 104:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 105:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** #define MCO1_CLK_ENABLE()     __HAL_RCC_GPIOA_CLK_ENABLE()
 106:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** #define MCO1_GPIO_PORT        GPIOA
 107:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** #define MCO1_PIN              GPIO_PIN_8
 108:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 109:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** /**
 110:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @}
 111:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   */
 112:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 113:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** /* Private variables ---------------------------------------------------------*/
 114:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** /** @defgroup RCC_Private_Variables RCC Private Variables
 115:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @{
 116:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   */
 117:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** /**
 118:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @}
 119:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   */
 120:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 121:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** /* Private function prototypes -----------------------------------------------*/
 122:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** static void RCC_Delay(uint32_t mdelay);
 123:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 124:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** /* Exported functions --------------------------------------------------------*/
 125:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 126:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** /** @defgroup RCC_Exported_Functions RCC Exported Functions
 127:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @{
 128:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   */
 129:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 130:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** /** @defgroup RCC_Exported_Functions_Group1 Initialization and de-initialization functions 
 131:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *  @brief    Initialization and Configuration functions 
 132:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *
 133:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   @verbatim    
 134:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   ===============================================================================
 135:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****            ##### Initialization and de-initialization functions #####
 136:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   ===============================================================================
 137:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     [..]
 138:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       This section provides functions allowing to configure the internal/external oscillators
 139:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       (HSE, HSI, LSE, LSI, PLL, CSS and MCO) and the System buses clocks (SYSCLK, AHB, APB1
 140:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       and APB2).
 141:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 142:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     [..] Internal/external clock and PLL configuration
 143:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       (#) HSI (high-speed internal), 8 MHz factory-trimmed RC used directly or through
 144:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           the PLL as System clock source.
 145:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       (#) LSI (low-speed internal), ~40 KHz low consumption RC used as IWDG and/or RTC
ARM GAS  C:\Users\MATEUS~1\AppData\Local\Temp\ccmMuE16.s 			page 4


 146:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           clock source.
 147:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 148:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       (#) HSE (high-speed external), 4 to 24 MHz (STM32F100xx) or 4 to 16 MHz (STM32F101x/STM32F102
 149:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           through the PLL as System clock source. Can be used also as RTC clock source.
 150:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 151:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       (#) LSE (low-speed external), 32 KHz oscillator used as RTC clock source.   
 152:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 153:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       (#) PLL (clocked by HSI or HSE), featuring different output clocks:
 154:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         (++) The first output is used to generate the high speed system clock (up to 72 MHz for STM
 155:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         (++) The second output is used to generate the clock for the USB OTG FS (48 MHz)
 156:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 157:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       (#) CSS (Clock security system), once enable using the macro __HAL_RCC_CSS_ENABLE()
 158:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           and if a HSE clock failure occurs(HSE used directly or through PLL as System 
 159:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           clock source), the System clocks automatically switched to HSI and an interrupt
 160:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           is generated if enabled. The interrupt is linked to the Cortex-M3 NMI 
 161:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           (Non-Maskable Interrupt) exception vector.   
 162:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 163:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       (#) MCO1 (microcontroller clock output), used to output SYSCLK, HSI,  
 164:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           HSE or PLL clock (divided by 2) on PA8 pin + PLL2CLK, PLL3CLK/2, PLL3CLK and XTI for STM3
 165:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 166:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     [..] System, AHB and APB buses clocks configuration
 167:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       (#) Several clock sources can be used to drive the System clock (SYSCLK): HSI,
 168:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           HSE and PLL.
 169:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           The AHB clock (HCLK) is derived from System clock through configurable
 170:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           prescaler and used to clock the CPU, memory and peripherals mapped
 171:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           on AHB bus (DMA, GPIO...). APB1 (PCLK1) and APB2 (PCLK2) clocks are derived
 172:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           from AHB clock through configurable prescalers and used to clock
 173:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           the peripherals mapped on these buses. You can use
 174:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           "@ref HAL_RCC_GetSysClockFreq()" function to retrieve the frequencies of these clocks.
 175:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 176:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       -@- All the peripheral clocks are derived from the System clock (SYSCLK) except:
 177:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           (+@) RTC: RTC clock can be derived either from the LSI, LSE or HSE clock
 178:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****               divided by 128. 
 179:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           (+@) USB OTG FS and RTC: USB OTG FS require a frequency equal to 48 MHz
 180:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****               to work correctly. This clock is derived of the main PLL through PLL Multiplier.
 181:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           (+@) I2S interface on STM32F105x/STM32F107x can be derived from PLL3CLK
 182:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           (+@) IWDG clock which is always the LSI clock.
 183:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 184:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       (#) For STM32F10xxx, the maximum frequency of the SYSCLK and HCLK/PCLK2 is 72 MHz, PCLK1 36 M
 185:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           For STM32F100xx, the maximum frequency of the SYSCLK and HCLK/PCLK1/PCLK2 is 24 MHz.  
 186:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           Depending on the SYSCLK frequency, the flash latency should be adapted accordingly.
 187:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   @endverbatim
 188:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @{
 189:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   */
 190:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   
 191:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** /*
 192:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   Additional consideration on the SYSCLK based on Latency settings:
 193:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         +-----------------------------------------------+
 194:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         | Latency       | SYSCLK clock frequency (MHz)  |
 195:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         |---------------|-------------------------------|
 196:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         |0WS(1CPU cycle)|       0 < SYSCLK <= 24        |
 197:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         |---------------|-------------------------------|
 198:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         |1WS(2CPU cycle)|      24 < SYSCLK <= 48        |
 199:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         |---------------|-------------------------------|
 200:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         |2WS(3CPU cycle)|      48 < SYSCLK <= 72        |
 201:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         +-----------------------------------------------+
 202:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   */
ARM GAS  C:\Users\MATEUS~1\AppData\Local\Temp\ccmMuE16.s 			page 5


 203:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 204:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** /**
 205:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @brief  Resets the RCC clock configuration to the default reset state.
 206:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @note   The default reset state of the clock configuration is given below:
 207:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *            - HSI ON and used as system clock source
 208:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *            - HSE, PLL, PLL2 and PLL3 are OFF
 209:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *            - AHB, APB1 and APB2 prescaler set to 1.
 210:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *            - CSS and MCO1 OFF
 211:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *            - All interrupts disabled
 212:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *            - All flags are cleared
 213:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @note   This function does not modify the configuration of the
 214:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *            - Peripheral clocks
 215:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *            - LSI, LSE and RTC clocks
 216:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @retval HAL_StatusTypeDef
 217:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   */
 218:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** HAL_StatusTypeDef HAL_RCC_DeInit(void)
 219:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** {
  28              		.loc 1 219 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 8
  31              		@ frame_needed = 1, uses_anonymous_args = 0
  32 0000 80B5     		push	{r7, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 8
  35              		.cfi_offset 7, -8
  36              		.cfi_offset 14, -4
  37 0002 82B0     		sub	sp, sp, #8
  38              	.LCFI1:
  39              		.cfi_def_cfa_offset 16
  40 0004 00AF     		add	r7, sp, #0
  41              	.LCFI2:
  42              		.cfi_def_cfa_register 7
 220:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   uint32_t tickstart;
 221:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 222:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Get Start Tick */
 223:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   tickstart = HAL_GetTick();
  43              		.loc 1 223 0
  44 0006 FFF7FEFF 		bl	HAL_GetTick
  45 000a 7860     		str	r0, [r7, #4]
 224:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 225:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Set HSION bit */
 226:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   SET_BIT(RCC->CR, RCC_CR_HSION);
  46              		.loc 1 226 0
  47 000c 444A     		ldr	r2, .L12
  48 000e 444B     		ldr	r3, .L12
  49 0010 1B68     		ldr	r3, [r3]
  50 0012 43F00103 		orr	r3, r3, #1
  51 0016 1360     		str	r3, [r2]
 227:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 228:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Wait till HSI is ready */
 229:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
  52              		.loc 1 229 0
  53 0018 08E0     		b	.L2
  54              	.L4:
 230:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   {
 231:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
  55              		.loc 1 231 0
ARM GAS  C:\Users\MATEUS~1\AppData\Local\Temp\ccmMuE16.s 			page 6


  56 001a FFF7FEFF 		bl	HAL_GetTick
  57 001e 0246     		mov	r2, r0
  58 0020 7B68     		ldr	r3, [r7, #4]
  59 0022 D31A     		subs	r3, r2, r3
  60 0024 022B     		cmp	r3, #2
  61 0026 01D9     		bls	.L2
 232:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     {
 233:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       return HAL_TIMEOUT;
  62              		.loc 1 233 0
  63 0028 0323     		movs	r3, #3
  64 002a 75E0     		b	.L3
  65              	.L2:
 229:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   {
  66              		.loc 1 229 0
  67 002c 3C4B     		ldr	r3, .L12
  68 002e 1B68     		ldr	r3, [r3]
  69 0030 03F00203 		and	r3, r3, #2
  70 0034 002B     		cmp	r3, #0
  71 0036 F0D0     		beq	.L4
 234:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     }
 235:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   }
 236:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 237:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Set HSITRIM bits to the reset value */
 238:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, (0x10U << RCC_CR_HSITRIM_Pos));
  72              		.loc 1 238 0
  73 0038 394A     		ldr	r2, .L12
  74 003a 394B     		ldr	r3, .L12
  75 003c 1B68     		ldr	r3, [r3]
  76 003e 23F0F803 		bic	r3, r3, #248
  77 0042 43F08003 		orr	r3, r3, #128
  78 0046 1360     		str	r3, [r2]
 239:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 240:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Get Start Tick */
 241:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   tickstart = HAL_GetTick();
  79              		.loc 1 241 0
  80 0048 FFF7FEFF 		bl	HAL_GetTick
  81 004c 7860     		str	r0, [r7, #4]
 242:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 243:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Reset CFGR register */
 244:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   CLEAR_REG(RCC->CFGR);
  82              		.loc 1 244 0
  83 004e 344B     		ldr	r3, .L12
  84 0050 0022     		movs	r2, #0
  85 0052 5A60     		str	r2, [r3, #4]
 245:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 246:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Wait till clock switch is ready */
 247:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
  86              		.loc 1 247 0
  87 0054 0AE0     		b	.L5
  88              	.L6:
 248:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   {
 249:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
  89              		.loc 1 249 0
  90 0056 FFF7FEFF 		bl	HAL_GetTick
  91 005a 0246     		mov	r2, r0
  92 005c 7B68     		ldr	r3, [r7, #4]
  93 005e D31A     		subs	r3, r2, r3
ARM GAS  C:\Users\MATEUS~1\AppData\Local\Temp\ccmMuE16.s 			page 7


  94 0060 41F28832 		movw	r2, #5000
  95 0064 9342     		cmp	r3, r2
  96 0066 01D9     		bls	.L5
 250:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     {
 251:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       return HAL_TIMEOUT;
  97              		.loc 1 251 0
  98 0068 0323     		movs	r3, #3
  99 006a 55E0     		b	.L3
 100              	.L5:
 247:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   {
 101              		.loc 1 247 0
 102 006c 2C4B     		ldr	r3, .L12
 103 006e 5B68     		ldr	r3, [r3, #4]
 104 0070 03F00C03 		and	r3, r3, #12
 105 0074 002B     		cmp	r3, #0
 106 0076 EED1     		bne	.L6
 252:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     }
 253:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   }
 254:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 255:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Update the SystemCoreClock global variable */
 256:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   SystemCoreClock = HSI_VALUE;
 107              		.loc 1 256 0
 108 0078 2A4B     		ldr	r3, .L12+4
 109 007a 2B4A     		ldr	r2, .L12+8
 110 007c 1A60     		str	r2, [r3]
 257:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 258:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Adapt Systick interrupt period */
 259:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 111              		.loc 1 259 0
 112 007e 0020     		movs	r0, #0
 113 0080 FFF7FEFF 		bl	HAL_InitTick
 114 0084 0346     		mov	r3, r0
 115 0086 002B     		cmp	r3, #0
 116 0088 01D0     		beq	.L7
 260:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   {
 261:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     return HAL_ERROR;
 117              		.loc 1 261 0
 118 008a 0123     		movs	r3, #1
 119 008c 44E0     		b	.L3
 120              	.L7:
 262:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   }
 263:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 264:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Get Start Tick */
 265:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   tickstart = HAL_GetTick();
 121              		.loc 1 265 0
 122 008e FFF7FEFF 		bl	HAL_GetTick
 123 0092 7860     		str	r0, [r7, #4]
 266:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 267:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Second step is to clear PLLON bit */
 268:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 124              		.loc 1 268 0
 125 0094 224A     		ldr	r2, .L12
 126 0096 224B     		ldr	r3, .L12
 127 0098 1B68     		ldr	r3, [r3]
 128 009a 23F08073 		bic	r3, r3, #16777216
 129 009e 1360     		str	r3, [r2]
 269:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
ARM GAS  C:\Users\MATEUS~1\AppData\Local\Temp\ccmMuE16.s 			page 8


 270:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Wait till PLL is disabled */
 271:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 130              		.loc 1 271 0
 131 00a0 08E0     		b	.L8
 132              	.L9:
 272:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   {
 273:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 133              		.loc 1 273 0
 134 00a2 FFF7FEFF 		bl	HAL_GetTick
 135 00a6 0246     		mov	r2, r0
 136 00a8 7B68     		ldr	r3, [r7, #4]
 137 00aa D31A     		subs	r3, r2, r3
 138 00ac 022B     		cmp	r3, #2
 139 00ae 01D9     		bls	.L8
 274:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     {
 275:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       return HAL_TIMEOUT;
 140              		.loc 1 275 0
 141 00b0 0323     		movs	r3, #3
 142 00b2 31E0     		b	.L3
 143              	.L8:
 271:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   {
 144              		.loc 1 271 0
 145 00b4 1A4B     		ldr	r3, .L12
 146 00b6 1B68     		ldr	r3, [r3]
 147 00b8 03F00073 		and	r3, r3, #33554432
 148 00bc 002B     		cmp	r3, #0
 149 00be F0D1     		bne	.L9
 276:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     }
 277:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   }
 278:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 279:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Ensure to reset PLLSRC and PLLMUL bits */
 280:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   CLEAR_REG(RCC->CFGR);
 150              		.loc 1 280 0
 151 00c0 174B     		ldr	r3, .L12
 152 00c2 0022     		movs	r2, #0
 153 00c4 5A60     		str	r2, [r3, #4]
 281:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 282:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Get Start Tick */
 283:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   tickstart = HAL_GetTick();
 154              		.loc 1 283 0
 155 00c6 FFF7FEFF 		bl	HAL_GetTick
 156 00ca 7860     		str	r0, [r7, #4]
 284:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 285:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Reset HSEON & CSSON bits */
 286:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_CSSON);
 157              		.loc 1 286 0
 158 00cc 144A     		ldr	r2, .L12
 159 00ce 144B     		ldr	r3, .L12
 160 00d0 1B68     		ldr	r3, [r3]
 161 00d2 23F41023 		bic	r3, r3, #589824
 162 00d6 1360     		str	r3, [r2]
 287:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 288:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Wait till HSE is disabled */
 289:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 163              		.loc 1 289 0
 164 00d8 08E0     		b	.L10
 165              	.L11:
ARM GAS  C:\Users\MATEUS~1\AppData\Local\Temp\ccmMuE16.s 			page 9


 290:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   {
 291:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 166              		.loc 1 291 0
 167 00da FFF7FEFF 		bl	HAL_GetTick
 168 00de 0246     		mov	r2, r0
 169 00e0 7B68     		ldr	r3, [r7, #4]
 170 00e2 D31A     		subs	r3, r2, r3
 171 00e4 642B     		cmp	r3, #100
 172 00e6 01D9     		bls	.L10
 292:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     {
 293:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       return HAL_TIMEOUT;
 173              		.loc 1 293 0
 174 00e8 0323     		movs	r3, #3
 175 00ea 15E0     		b	.L3
 176              	.L10:
 289:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   {
 177              		.loc 1 289 0
 178 00ec 0C4B     		ldr	r3, .L12
 179 00ee 1B68     		ldr	r3, [r3]
 180 00f0 03F40033 		and	r3, r3, #131072
 181 00f4 002B     		cmp	r3, #0
 182 00f6 F0D1     		bne	.L11
 294:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     }
 295:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   }
 296:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 297:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Reset HSEBYP bit */
 298:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 183              		.loc 1 298 0
 184 00f8 094A     		ldr	r2, .L12
 185 00fa 094B     		ldr	r3, .L12
 186 00fc 1B68     		ldr	r3, [r3]
 187 00fe 23F48023 		bic	r3, r3, #262144
 188 0102 1360     		str	r3, [r2]
 299:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 300:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** #if defined(RCC_PLL2_SUPPORT)
 301:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Get Start Tick */
 302:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   tickstart = HAL_GetTick();
 303:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 304:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Clear PLL2ON bit */
 305:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   CLEAR_BIT(RCC->CR, RCC_CR_PLL2ON);
 306:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 307:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Wait till PLL2 is disabled */
 308:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   while (READ_BIT(RCC->CR, RCC_CR_PLL2RDY) != RESET)
 309:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   {
 310:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 311:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     {
 312:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       return HAL_TIMEOUT;
 313:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     }
 314:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   }
 315:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** #endif /* RCC_PLL2_SUPPORT */
 316:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 317:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** #if defined(RCC_PLLI2S_SUPPORT)
 318:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Get Start Tick */
 319:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   tickstart = HAL_GetTick();
 320:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 321:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Clear PLL3ON bit */
 322:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   CLEAR_BIT(RCC->CR, RCC_CR_PLL3ON);
ARM GAS  C:\Users\MATEUS~1\AppData\Local\Temp\ccmMuE16.s 			page 10


 323:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 324:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Wait till PLL3 is disabled */
 325:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   while (READ_BIT(RCC->CR, RCC_CR_PLL3RDY) != RESET)
 326:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   {
 327:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 328:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     {
 329:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       return HAL_TIMEOUT;
 330:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     }
 331:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   }
 332:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** #endif /* RCC_PLLI2S_SUPPORT */
 333:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 334:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** #if defined(RCC_CFGR2_PREDIV1)
 335:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Reset CFGR2 register */
 336:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   CLEAR_REG(RCC->CFGR2);
 337:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** #endif /* RCC_CFGR2_PREDIV1 */
 338:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 339:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Reset all CSR flags */
 340:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 189              		.loc 1 340 0
 190 0104 064A     		ldr	r2, .L12
 191 0106 064B     		ldr	r3, .L12
 192 0108 5B6A     		ldr	r3, [r3, #36]
 193 010a 43F08073 		orr	r3, r3, #16777216
 194 010e 5362     		str	r3, [r2, #36]
 341:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 342:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Disable all interrupts */
 343:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   CLEAR_REG(RCC->CIR);
 195              		.loc 1 343 0
 196 0110 034B     		ldr	r3, .L12
 197 0112 0022     		movs	r2, #0
 198 0114 9A60     		str	r2, [r3, #8]
 344:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 345:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   return HAL_OK;
 199              		.loc 1 345 0
 200 0116 0023     		movs	r3, #0
 201              	.L3:
 346:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** }
 202              		.loc 1 346 0
 203 0118 1846     		mov	r0, r3
 204 011a 0837     		adds	r7, r7, #8
 205              	.LCFI3:
 206              		.cfi_def_cfa_offset 8
 207 011c BD46     		mov	sp, r7
 208              	.LCFI4:
 209              		.cfi_def_cfa_register 13
 210              		@ sp needed
 211 011e 80BD     		pop	{r7, pc}
 212              	.L13:
 213              		.align	2
 214              	.L12:
 215 0120 00100240 		.word	1073876992
 216 0124 00000000 		.word	SystemCoreClock
 217 0128 00127A00 		.word	8000000
 218              		.cfi_endproc
 219              	.LFE64:
 221              		.section	.text.HAL_RCC_OscConfig,"ax",%progbits
 222              		.align	2
ARM GAS  C:\Users\MATEUS~1\AppData\Local\Temp\ccmMuE16.s 			page 11


 223              		.global	HAL_RCC_OscConfig
 224              		.thumb
 225              		.thumb_func
 227              	HAL_RCC_OscConfig:
 228              	.LFB65:
 347:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 348:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** /**
 349:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @brief  Initializes the RCC Oscillators according to the specified parameters in the
 350:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *         RCC_OscInitTypeDef.
 351:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @param  RCC_OscInitStruct pointer to an RCC_OscInitTypeDef structure that
 352:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *         contains the configuration information for the RCC Oscillators.
 353:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @note   The PLL is not disabled when used as system clock.
 354:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @note   The PLL is not disabled when USB OTG FS clock is enabled (specific to devices with USB 
 355:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @note   Transitions LSE Bypass to LSE On and LSE On to LSE Bypass are not
 356:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *         supported by this macro. User should request a transition to LSE Off
 357:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *         first and then LSE On or LSE Bypass.
 358:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @note   Transition HSE Bypass to HSE On and HSE On to HSE Bypass are not
 359:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *         supported by this macro. User should request a transition to HSE Off
 360:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *         first and then HSE On or HSE Bypass.
 361:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @retval HAL status
 362:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   */
 363:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
 364:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** {
 229              		.loc 1 364 0
 230              		.cfi_startproc
 231              		@ args = 0, pretend = 0, frame = 24
 232              		@ frame_needed = 1, uses_anonymous_args = 0
 233 0000 80B5     		push	{r7, lr}
 234              	.LCFI5:
 235              		.cfi_def_cfa_offset 8
 236              		.cfi_offset 7, -8
 237              		.cfi_offset 14, -4
 238 0002 86B0     		sub	sp, sp, #24
 239              	.LCFI6:
 240              		.cfi_def_cfa_offset 32
 241 0004 00AF     		add	r7, sp, #0
 242              	.LCFI7:
 243              		.cfi_def_cfa_register 7
 244 0006 7860     		str	r0, [r7, #4]
 365:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****    uint32_t tickstart = 0U;
 245              		.loc 1 365 0
 246 0008 0023     		movs	r3, #0
 247 000a 3B61     		str	r3, [r7, #16]
 366:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   
 367:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Check the parameters */
 368:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   assert_param(RCC_OscInitStruct != NULL);
 369:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 370:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   
 371:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /*------------------------------- HSE Configuration ------------------------*/ 
 372:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 248              		.loc 1 372 0
 249 000c 7B68     		ldr	r3, [r7, #4]
 250 000e 1B68     		ldr	r3, [r3]
 251 0010 03F00103 		and	r3, r3, #1
 252 0014 002B     		cmp	r3, #0
 253 0016 00F08680 		beq	.L15
 373:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   {
ARM GAS  C:\Users\MATEUS~1\AppData\Local\Temp\ccmMuE16.s 			page 12


 374:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     /* Check the parameters */
 375:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 376:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         
 377:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowe
 378:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 254              		.loc 1 378 0
 255 001a 924B     		ldr	r3, .L70
 256 001c 5B68     		ldr	r3, [r3, #4]
 257 001e 03F00C03 		and	r3, r3, #12
 258 0022 042B     		cmp	r3, #4
 259 0024 0BD0     		beq	.L16
 379:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_
 260              		.loc 1 379 0
 261 0026 8F4B     		ldr	r3, .L70
 262 0028 5B68     		ldr	r3, [r3, #4]
 263 002a 03F00C03 		and	r3, r3, #12
 264 002e 082B     		cmp	r3, #8
 265 0030 11D1     		bne	.L17
 266              		.loc 1 379 0 is_stmt 0 discriminator 1
 267 0032 8C4B     		ldr	r3, .L70
 268 0034 5B68     		ldr	r3, [r3, #4]
 269 0036 03F48033 		and	r3, r3, #65536
 270 003a 002B     		cmp	r3, #0
 271 003c 0BD0     		beq	.L17
 272              	.L16:
 380:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     {
 381:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_
 273              		.loc 1 381 0 is_stmt 1
 274 003e 894B     		ldr	r3, .L70
 275 0040 1B68     		ldr	r3, [r3]
 276 0042 03F40033 		and	r3, r3, #131072
 277 0046 002B     		cmp	r3, #0
 278 0048 6CD0     		beq	.L69
 279              		.loc 1 381 0 is_stmt 0 discriminator 1
 280 004a 7B68     		ldr	r3, [r7, #4]
 281 004c 5B68     		ldr	r3, [r3, #4]
 282 004e 002B     		cmp	r3, #0
 283 0050 68D1     		bne	.L69
 382:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       {
 383:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         return HAL_ERROR;
 284              		.loc 1 383 0 is_stmt 1
 285 0052 0123     		movs	r3, #1
 286 0054 2EE2     		b	.L19
 287              	.L17:
 384:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       }
 385:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     }
 386:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     else
 387:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     {
 388:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       /* Set the new HSE configuration ---------------------------------------*/
 389:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 288              		.loc 1 389 0
 289 0056 7B68     		ldr	r3, [r7, #4]
 290 0058 5B68     		ldr	r3, [r3, #4]
 291 005a B3F5803F 		cmp	r3, #65536
 292 005e 06D1     		bne	.L20
 293              		.loc 1 389 0 is_stmt 0 discriminator 1
 294 0060 804A     		ldr	r2, .L70
ARM GAS  C:\Users\MATEUS~1\AppData\Local\Temp\ccmMuE16.s 			page 13


 295 0062 804B     		ldr	r3, .L70
 296 0064 1B68     		ldr	r3, [r3]
 297 0066 43F48033 		orr	r3, r3, #65536
 298 006a 1360     		str	r3, [r2]
 299 006c 2EE0     		b	.L21
 300              	.L20:
 301              		.loc 1 389 0 discriminator 2
 302 006e 7B68     		ldr	r3, [r7, #4]
 303 0070 5B68     		ldr	r3, [r3, #4]
 304 0072 002B     		cmp	r3, #0
 305 0074 0CD1     		bne	.L22
 306              		.loc 1 389 0 discriminator 3
 307 0076 7B4A     		ldr	r2, .L70
 308 0078 7A4B     		ldr	r3, .L70
 309 007a 1B68     		ldr	r3, [r3]
 310 007c 23F48033 		bic	r3, r3, #65536
 311 0080 1360     		str	r3, [r2]
 312 0082 784A     		ldr	r2, .L70
 313 0084 774B     		ldr	r3, .L70
 314 0086 1B68     		ldr	r3, [r3]
 315 0088 23F48023 		bic	r3, r3, #262144
 316 008c 1360     		str	r3, [r2]
 317 008e 1DE0     		b	.L21
 318              	.L22:
 319              		.loc 1 389 0 discriminator 4
 320 0090 7B68     		ldr	r3, [r7, #4]
 321 0092 5B68     		ldr	r3, [r3, #4]
 322 0094 B3F5A02F 		cmp	r3, #327680
 323 0098 0CD1     		bne	.L23
 324              		.loc 1 389 0 discriminator 5
 325 009a 724A     		ldr	r2, .L70
 326 009c 714B     		ldr	r3, .L70
 327 009e 1B68     		ldr	r3, [r3]
 328 00a0 43F48023 		orr	r3, r3, #262144
 329 00a4 1360     		str	r3, [r2]
 330 00a6 6F4A     		ldr	r2, .L70
 331 00a8 6E4B     		ldr	r3, .L70
 332 00aa 1B68     		ldr	r3, [r3]
 333 00ac 43F48033 		orr	r3, r3, #65536
 334 00b0 1360     		str	r3, [r2]
 335 00b2 0BE0     		b	.L21
 336              	.L23:
 337              		.loc 1 389 0 discriminator 6
 338 00b4 6B4A     		ldr	r2, .L70
 339 00b6 6B4B     		ldr	r3, .L70
 340 00b8 1B68     		ldr	r3, [r3]
 341 00ba 23F48033 		bic	r3, r3, #65536
 342 00be 1360     		str	r3, [r2]
 343 00c0 684A     		ldr	r2, .L70
 344 00c2 684B     		ldr	r3, .L70
 345 00c4 1B68     		ldr	r3, [r3]
 346 00c6 23F48023 		bic	r3, r3, #262144
 347 00ca 1360     		str	r3, [r2]
 348              	.L21:
 390:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       
 391:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 392:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****        /* Check the HSE State */
ARM GAS  C:\Users\MATEUS~1\AppData\Local\Temp\ccmMuE16.s 			page 14


 393:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 349              		.loc 1 393 0 is_stmt 1
 350 00cc 7B68     		ldr	r3, [r7, #4]
 351 00ce 5B68     		ldr	r3, [r3, #4]
 352 00d0 002B     		cmp	r3, #0
 353 00d2 13D0     		beq	.L24
 394:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       {
 395:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         /* Get Start Tick */
 396:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         tickstart = HAL_GetTick();
 354              		.loc 1 396 0
 355 00d4 FFF7FEFF 		bl	HAL_GetTick
 356 00d8 3861     		str	r0, [r7, #16]
 397:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         
 398:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         /* Wait till HSE is ready */
 399:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 357              		.loc 1 399 0
 358 00da 08E0     		b	.L25
 359              	.L26:
 400:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         {
 401:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 360              		.loc 1 401 0
 361 00dc FFF7FEFF 		bl	HAL_GetTick
 362 00e0 0246     		mov	r2, r0
 363 00e2 3B69     		ldr	r3, [r7, #16]
 364 00e4 D31A     		subs	r3, r2, r3
 365 00e6 642B     		cmp	r3, #100
 366 00e8 01D9     		bls	.L25
 402:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           {
 403:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****             return HAL_TIMEOUT;
 367              		.loc 1 403 0
 368 00ea 0323     		movs	r3, #3
 369 00ec E2E1     		b	.L19
 370              	.L25:
 399:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         {
 371              		.loc 1 399 0
 372 00ee 5D4B     		ldr	r3, .L70
 373 00f0 1B68     		ldr	r3, [r3]
 374 00f2 03F40033 		and	r3, r3, #131072
 375 00f6 002B     		cmp	r3, #0
 376 00f8 F0D0     		beq	.L26
 377 00fa 14E0     		b	.L15
 378              	.L24:
 404:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           }
 405:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         }
 406:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       }
 407:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       else
 408:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       {
 409:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         /* Get Start Tick */
 410:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         tickstart = HAL_GetTick();
 379              		.loc 1 410 0
 380 00fc FFF7FEFF 		bl	HAL_GetTick
 381 0100 3861     		str	r0, [r7, #16]
 411:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         
 412:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         /* Wait till HSE is disabled */
 413:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 382              		.loc 1 413 0
 383 0102 08E0     		b	.L27
ARM GAS  C:\Users\MATEUS~1\AppData\Local\Temp\ccmMuE16.s 			page 15


 384              	.L28:
 414:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         {
 415:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****            if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 385              		.loc 1 415 0
 386 0104 FFF7FEFF 		bl	HAL_GetTick
 387 0108 0246     		mov	r2, r0
 388 010a 3B69     		ldr	r3, [r7, #16]
 389 010c D31A     		subs	r3, r2, r3
 390 010e 642B     		cmp	r3, #100
 391 0110 01D9     		bls	.L27
 416:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           {
 417:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****             return HAL_TIMEOUT;
 392              		.loc 1 417 0
 393 0112 0323     		movs	r3, #3
 394 0114 CEE1     		b	.L19
 395              	.L27:
 413:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         {
 396              		.loc 1 413 0
 397 0116 534B     		ldr	r3, .L70
 398 0118 1B68     		ldr	r3, [r3]
 399 011a 03F40033 		and	r3, r3, #131072
 400 011e 002B     		cmp	r3, #0
 401 0120 F0D1     		bne	.L28
 402 0122 00E0     		b	.L15
 403              	.L69:
 381:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       {
 404              		.loc 1 381 0
 405 0124 00BF     		nop
 406              	.L15:
 418:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           }
 419:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         }
 420:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       }
 421:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     }
 422:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   }
 423:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /*----------------------------- HSI Configuration --------------------------*/ 
 424:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 407              		.loc 1 424 0
 408 0126 7B68     		ldr	r3, [r7, #4]
 409 0128 1B68     		ldr	r3, [r3]
 410 012a 03F00203 		and	r3, r3, #2
 411 012e 002B     		cmp	r3, #0
 412 0130 63D0     		beq	.L29
 425:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   {
 426:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     /* Check the parameters */
 427:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 428:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 429:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     
 430:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock *
 431:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 413              		.loc 1 431 0
 414 0132 4C4B     		ldr	r3, .L70
 415 0134 5B68     		ldr	r3, [r3, #4]
 416 0136 03F00C03 		and	r3, r3, #12
 417 013a 002B     		cmp	r3, #0
 418 013c 0BD0     		beq	.L30
 432:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_
 419              		.loc 1 432 0
ARM GAS  C:\Users\MATEUS~1\AppData\Local\Temp\ccmMuE16.s 			page 16


 420 013e 494B     		ldr	r3, .L70
 421 0140 5B68     		ldr	r3, [r3, #4]
 422 0142 03F00C03 		and	r3, r3, #12
 423 0146 082B     		cmp	r3, #8
 424 0148 1CD1     		bne	.L31
 425              		.loc 1 432 0 is_stmt 0 discriminator 1
 426 014a 464B     		ldr	r3, .L70
 427 014c 5B68     		ldr	r3, [r3, #4]
 428 014e 03F48033 		and	r3, r3, #65536
 429 0152 002B     		cmp	r3, #0
 430 0154 16D1     		bne	.L31
 431              	.L30:
 433:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     {
 434:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       /* When HSI is used as system clock it will not disabled */
 435:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_
 432              		.loc 1 435 0 is_stmt 1
 433 0156 434B     		ldr	r3, .L70
 434 0158 1B68     		ldr	r3, [r3]
 435 015a 03F00203 		and	r3, r3, #2
 436 015e 002B     		cmp	r3, #0
 437 0160 05D0     		beq	.L32
 438              		.loc 1 435 0 is_stmt 0 discriminator 1
 439 0162 7B68     		ldr	r3, [r7, #4]
 440 0164 1B69     		ldr	r3, [r3, #16]
 441 0166 012B     		cmp	r3, #1
 442 0168 01D0     		beq	.L32
 436:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       {
 437:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         return HAL_ERROR;
 443              		.loc 1 437 0 is_stmt 1
 444 016a 0123     		movs	r3, #1
 445 016c A2E1     		b	.L19
 446              	.L32:
 438:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       }
 439:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       /* Otherwise, just the calibration is allowed */
 440:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       else
 441:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       {
 442:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
 443:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 447              		.loc 1 443 0
 448 016e 3D49     		ldr	r1, .L70
 449 0170 3C4B     		ldr	r3, .L70
 450 0172 1B68     		ldr	r3, [r3]
 451 0174 23F0F802 		bic	r2, r3, #248
 452 0178 7B68     		ldr	r3, [r7, #4]
 453 017a 5B69     		ldr	r3, [r3, #20]
 454 017c DB00     		lsls	r3, r3, #3
 455 017e 1343     		orrs	r3, r3, r2
 456 0180 0B60     		str	r3, [r1]
 435:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       {
 457              		.loc 1 435 0
 458 0182 3AE0     		b	.L29
 459              	.L31:
 444:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       }
 445:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     }
 446:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     else
 447:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     {
 448:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       /* Check the HSI State */
ARM GAS  C:\Users\MATEUS~1\AppData\Local\Temp\ccmMuE16.s 			page 17


 449:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 460              		.loc 1 449 0
 461 0184 7B68     		ldr	r3, [r7, #4]
 462 0186 1B69     		ldr	r3, [r3, #16]
 463 0188 002B     		cmp	r3, #0
 464 018a 20D0     		beq	.L33
 450:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       {
 451:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****        /* Enable the Internal High Speed oscillator (HSI). */
 452:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         __HAL_RCC_HSI_ENABLE();
 465              		.loc 1 452 0
 466 018c 364B     		ldr	r3, .L70+4
 467 018e 0122     		movs	r2, #1
 468 0190 1A60     		str	r2, [r3]
 453:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         
 454:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         /* Get Start Tick */
 455:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         tickstart = HAL_GetTick();
 469              		.loc 1 455 0
 470 0192 FFF7FEFF 		bl	HAL_GetTick
 471 0196 3861     		str	r0, [r7, #16]
 456:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         
 457:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         /* Wait till HSI is ready */
 458:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 472              		.loc 1 458 0
 473 0198 08E0     		b	.L34
 474              	.L35:
 459:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         {
 460:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 475              		.loc 1 460 0
 476 019a FFF7FEFF 		bl	HAL_GetTick
 477 019e 0246     		mov	r2, r0
 478 01a0 3B69     		ldr	r3, [r7, #16]
 479 01a2 D31A     		subs	r3, r2, r3
 480 01a4 022B     		cmp	r3, #2
 481 01a6 01D9     		bls	.L34
 461:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           {
 462:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****             return HAL_TIMEOUT;
 482              		.loc 1 462 0
 483 01a8 0323     		movs	r3, #3
 484 01aa 83E1     		b	.L19
 485              	.L34:
 458:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         {
 486              		.loc 1 458 0
 487 01ac 2D4B     		ldr	r3, .L70
 488 01ae 1B68     		ldr	r3, [r3]
 489 01b0 03F00203 		and	r3, r3, #2
 490 01b4 002B     		cmp	r3, #0
 491 01b6 F0D0     		beq	.L35
 463:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           }
 464:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         }
 465:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****                 
 466:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
 467:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 492              		.loc 1 467 0
 493 01b8 2A49     		ldr	r1, .L70
 494 01ba 2A4B     		ldr	r3, .L70
 495 01bc 1B68     		ldr	r3, [r3]
 496 01be 23F0F802 		bic	r2, r3, #248
ARM GAS  C:\Users\MATEUS~1\AppData\Local\Temp\ccmMuE16.s 			page 18


 497 01c2 7B68     		ldr	r3, [r7, #4]
 498 01c4 5B69     		ldr	r3, [r3, #20]
 499 01c6 DB00     		lsls	r3, r3, #3
 500 01c8 1343     		orrs	r3, r3, r2
 501 01ca 0B60     		str	r3, [r1]
 502 01cc 15E0     		b	.L29
 503              	.L33:
 468:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       }
 469:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       else
 470:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       {
 471:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         /* Disable the Internal High Speed oscillator (HSI). */
 472:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         __HAL_RCC_HSI_DISABLE();
 504              		.loc 1 472 0
 505 01ce 264B     		ldr	r3, .L70+4
 506 01d0 0022     		movs	r2, #0
 507 01d2 1A60     		str	r2, [r3]
 473:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         
 474:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         /* Get Start Tick */
 475:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         tickstart = HAL_GetTick();
 508              		.loc 1 475 0
 509 01d4 FFF7FEFF 		bl	HAL_GetTick
 510 01d8 3861     		str	r0, [r7, #16]
 476:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         
 477:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         /* Wait till HSI is disabled */
 478:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 511              		.loc 1 478 0
 512 01da 08E0     		b	.L36
 513              	.L37:
 479:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         {
 480:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 514              		.loc 1 480 0
 515 01dc FFF7FEFF 		bl	HAL_GetTick
 516 01e0 0246     		mov	r2, r0
 517 01e2 3B69     		ldr	r3, [r7, #16]
 518 01e4 D31A     		subs	r3, r2, r3
 519 01e6 022B     		cmp	r3, #2
 520 01e8 01D9     		bls	.L36
 481:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           {
 482:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****             return HAL_TIMEOUT;
 521              		.loc 1 482 0
 522 01ea 0323     		movs	r3, #3
 523 01ec 62E1     		b	.L19
 524              	.L36:
 478:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         {
 525              		.loc 1 478 0
 526 01ee 1D4B     		ldr	r3, .L70
 527 01f0 1B68     		ldr	r3, [r3]
 528 01f2 03F00203 		and	r3, r3, #2
 529 01f6 002B     		cmp	r3, #0
 530 01f8 F0D1     		bne	.L37
 531              	.L29:
 483:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           }
 484:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         }
 485:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       }
 486:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     }
 487:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   }
 488:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /*------------------------------ LSI Configuration -------------------------*/ 
ARM GAS  C:\Users\MATEUS~1\AppData\Local\Temp\ccmMuE16.s 			page 19


 489:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 532              		.loc 1 489 0
 533 01fa 7B68     		ldr	r3, [r7, #4]
 534 01fc 1B68     		ldr	r3, [r3]
 535 01fe 03F00803 		and	r3, r3, #8
 536 0202 002B     		cmp	r3, #0
 537 0204 3AD0     		beq	.L38
 490:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   {
 491:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     /* Check the parameters */
 492:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 493:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     
 494:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     /* Check the LSI State */
 495:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 538              		.loc 1 495 0
 539 0206 7B68     		ldr	r3, [r7, #4]
 540 0208 9B69     		ldr	r3, [r3, #24]
 541 020a 002B     		cmp	r3, #0
 542 020c 19D0     		beq	.L39
 496:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     {
 497:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       /* Enable the Internal Low Speed oscillator (LSI). */
 498:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       __HAL_RCC_LSI_ENABLE();
 543              		.loc 1 498 0
 544 020e 174B     		ldr	r3, .L70+8
 545 0210 0122     		movs	r2, #1
 546 0212 1A60     		str	r2, [r3]
 499:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       
 500:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       /* Get Start Tick */
 501:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       tickstart = HAL_GetTick();
 547              		.loc 1 501 0
 548 0214 FFF7FEFF 		bl	HAL_GetTick
 549 0218 3861     		str	r0, [r7, #16]
 502:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       
 503:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       /* Wait till LSI is ready */  
 504:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 550              		.loc 1 504 0
 551 021a 08E0     		b	.L40
 552              	.L41:
 505:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       {
 506:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 553              		.loc 1 506 0
 554 021c FFF7FEFF 		bl	HAL_GetTick
 555 0220 0246     		mov	r2, r0
 556 0222 3B69     		ldr	r3, [r7, #16]
 557 0224 D31A     		subs	r3, r2, r3
 558 0226 022B     		cmp	r3, #2
 559 0228 01D9     		bls	.L40
 507:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         {
 508:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           return HAL_TIMEOUT;
 560              		.loc 1 508 0
 561 022a 0323     		movs	r3, #3
 562 022c 42E1     		b	.L19
 563              	.L40:
 504:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       {
 564              		.loc 1 504 0
 565 022e 0D4B     		ldr	r3, .L70
 566 0230 5B6A     		ldr	r3, [r3, #36]
 567 0232 03F00203 		and	r3, r3, #2
ARM GAS  C:\Users\MATEUS~1\AppData\Local\Temp\ccmMuE16.s 			page 20


 568 0236 002B     		cmp	r3, #0
 569 0238 F0D0     		beq	.L41
 509:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         }
 510:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       }
 511:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
 512:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           should be added.*/
 513:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       RCC_Delay(1);
 570              		.loc 1 513 0
 571 023a 0120     		movs	r0, #1
 572 023c FFF7FEFF 		bl	RCC_Delay
 573 0240 1CE0     		b	.L38
 574              	.L39:
 514:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     }
 515:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     else
 516:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     {
 517:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       /* Disable the Internal Low Speed oscillator (LSI). */
 518:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       __HAL_RCC_LSI_DISABLE();
 575              		.loc 1 518 0
 576 0242 0A4B     		ldr	r3, .L70+8
 577 0244 0022     		movs	r2, #0
 578 0246 1A60     		str	r2, [r3]
 519:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       
 520:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       /* Get Start Tick */
 521:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       tickstart = HAL_GetTick();
 579              		.loc 1 521 0
 580 0248 FFF7FEFF 		bl	HAL_GetTick
 581 024c 3861     		str	r0, [r7, #16]
 522:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       
 523:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       /* Wait till LSI is disabled */  
 524:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 582              		.loc 1 524 0
 583 024e 0FE0     		b	.L42
 584              	.L43:
 525:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       {
 526:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 585              		.loc 1 526 0
 586 0250 FFF7FEFF 		bl	HAL_GetTick
 587 0254 0246     		mov	r2, r0
 588 0256 3B69     		ldr	r3, [r7, #16]
 589 0258 D31A     		subs	r3, r2, r3
 590 025a 022B     		cmp	r3, #2
 591 025c 08D9     		bls	.L42
 527:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         {
 528:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           return HAL_TIMEOUT;
 592              		.loc 1 528 0
 593 025e 0323     		movs	r3, #3
 594 0260 28E1     		b	.L19
 595              	.L71:
 596 0262 00BF     		.align	2
 597              	.L70:
 598 0264 00100240 		.word	1073876992
 599 0268 00004242 		.word	1111621632
 600 026c 80044242 		.word	1111622784
 601              	.L42:
 524:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       {
 602              		.loc 1 524 0
 603 0270 924B     		ldr	r3, .L72
ARM GAS  C:\Users\MATEUS~1\AppData\Local\Temp\ccmMuE16.s 			page 21


 604 0272 5B6A     		ldr	r3, [r3, #36]
 605 0274 03F00203 		and	r3, r3, #2
 606 0278 002B     		cmp	r3, #0
 607 027a E9D1     		bne	.L43
 608              	.L38:
 529:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         }
 530:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       }
 531:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     }
 532:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   }
 533:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /*------------------------------ LSE Configuration -------------------------*/ 
 534:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 609              		.loc 1 534 0
 610 027c 7B68     		ldr	r3, [r7, #4]
 611 027e 1B68     		ldr	r3, [r3]
 612 0280 03F00403 		and	r3, r3, #4
 613 0284 002B     		cmp	r3, #0
 614 0286 00F0A680 		beq	.L44
 615              	.LBB4:
 535:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   {
 536:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     FlagStatus       pwrclkchanged = RESET;
 616              		.loc 1 536 0
 617 028a 0023     		movs	r3, #0
 618 028c FB75     		strb	r3, [r7, #23]
 537:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     
 538:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     /* Check the parameters */
 539:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 540:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 541:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     /* Update LSE configuration in Backup Domain control register    */
 542:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     /* Requires to enable write access to Backup Domain of necessary */
 543:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 619              		.loc 1 543 0
 620 028e 8B4B     		ldr	r3, .L72
 621 0290 DB69     		ldr	r3, [r3, #28]
 622 0292 03F08053 		and	r3, r3, #268435456
 623 0296 002B     		cmp	r3, #0
 624 0298 0DD1     		bne	.L45
 625              	.LBB5:
 544:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     {
 545:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       __HAL_RCC_PWR_CLK_ENABLE();
 626              		.loc 1 545 0
 627 029a 884A     		ldr	r2, .L72
 628 029c 874B     		ldr	r3, .L72
 629 029e DB69     		ldr	r3, [r3, #28]
 630 02a0 43F08053 		orr	r3, r3, #268435456
 631 02a4 D361     		str	r3, [r2, #28]
 632 02a6 854B     		ldr	r3, .L72
 633 02a8 DB69     		ldr	r3, [r3, #28]
 634 02aa 03F08053 		and	r3, r3, #268435456
 635 02ae FB60     		str	r3, [r7, #12]
 636 02b0 FB68     		ldr	r3, [r7, #12]
 637              	.LBE5:
 546:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       pwrclkchanged = SET;
 638              		.loc 1 546 0
 639 02b2 0123     		movs	r3, #1
 640 02b4 FB75     		strb	r3, [r7, #23]
 641              	.L45:
 547:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     }
ARM GAS  C:\Users\MATEUS~1\AppData\Local\Temp\ccmMuE16.s 			page 22


 548:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     
 549:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 642              		.loc 1 549 0
 643 02b6 824B     		ldr	r3, .L72+4
 644 02b8 1B68     		ldr	r3, [r3]
 645 02ba 03F48073 		and	r3, r3, #256
 646 02be 002B     		cmp	r3, #0
 647 02c0 18D1     		bne	.L46
 550:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     {
 551:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       /* Enable write access to Backup domain */
 552:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       SET_BIT(PWR->CR, PWR_CR_DBP);
 648              		.loc 1 552 0
 649 02c2 7F4A     		ldr	r2, .L72+4
 650 02c4 7E4B     		ldr	r3, .L72+4
 651 02c6 1B68     		ldr	r3, [r3]
 652 02c8 43F48073 		orr	r3, r3, #256
 653 02cc 1360     		str	r3, [r2]
 553:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       
 554:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       /* Wait for Backup domain Write protection disable */
 555:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       tickstart = HAL_GetTick();
 654              		.loc 1 555 0
 655 02ce FFF7FEFF 		bl	HAL_GetTick
 656 02d2 3861     		str	r0, [r7, #16]
 556:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 557:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 657              		.loc 1 557 0
 658 02d4 08E0     		b	.L47
 659              	.L48:
 558:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       {
 559:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 660              		.loc 1 559 0
 661 02d6 FFF7FEFF 		bl	HAL_GetTick
 662 02da 0246     		mov	r2, r0
 663 02dc 3B69     		ldr	r3, [r7, #16]
 664 02de D31A     		subs	r3, r2, r3
 665 02e0 642B     		cmp	r3, #100
 666 02e2 01D9     		bls	.L47
 560:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         {
 561:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           return HAL_TIMEOUT;
 667              		.loc 1 561 0
 668 02e4 0323     		movs	r3, #3
 669 02e6 E5E0     		b	.L19
 670              	.L47:
 557:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       {
 671              		.loc 1 557 0
 672 02e8 754B     		ldr	r3, .L72+4
 673 02ea 1B68     		ldr	r3, [r3]
 674 02ec 03F48073 		and	r3, r3, #256
 675 02f0 002B     		cmp	r3, #0
 676 02f2 F0D0     		beq	.L48
 677              	.L46:
 562:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         }
 563:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       }
 564:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     }
 565:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 566:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     /* Set the new LSE configuration -----------------------------------------*/
 567:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
ARM GAS  C:\Users\MATEUS~1\AppData\Local\Temp\ccmMuE16.s 			page 23


 678              		.loc 1 567 0
 679 02f4 7B68     		ldr	r3, [r7, #4]
 680 02f6 DB68     		ldr	r3, [r3, #12]
 681 02f8 012B     		cmp	r3, #1
 682 02fa 06D1     		bne	.L49
 683              		.loc 1 567 0 is_stmt 0 discriminator 1
 684 02fc 6F4A     		ldr	r2, .L72
 685 02fe 6F4B     		ldr	r3, .L72
 686 0300 1B6A     		ldr	r3, [r3, #32]
 687 0302 43F00103 		orr	r3, r3, #1
 688 0306 1362     		str	r3, [r2, #32]
 689 0308 2DE0     		b	.L50
 690              	.L49:
 691              		.loc 1 567 0 discriminator 2
 692 030a 7B68     		ldr	r3, [r7, #4]
 693 030c DB68     		ldr	r3, [r3, #12]
 694 030e 002B     		cmp	r3, #0
 695 0310 0CD1     		bne	.L51
 696              		.loc 1 567 0 discriminator 3
 697 0312 6A4A     		ldr	r2, .L72
 698 0314 694B     		ldr	r3, .L72
 699 0316 1B6A     		ldr	r3, [r3, #32]
 700 0318 23F00103 		bic	r3, r3, #1
 701 031c 1362     		str	r3, [r2, #32]
 702 031e 674A     		ldr	r2, .L72
 703 0320 664B     		ldr	r3, .L72
 704 0322 1B6A     		ldr	r3, [r3, #32]
 705 0324 23F00403 		bic	r3, r3, #4
 706 0328 1362     		str	r3, [r2, #32]
 707 032a 1CE0     		b	.L50
 708              	.L51:
 709              		.loc 1 567 0 discriminator 4
 710 032c 7B68     		ldr	r3, [r7, #4]
 711 032e DB68     		ldr	r3, [r3, #12]
 712 0330 052B     		cmp	r3, #5
 713 0332 0CD1     		bne	.L52
 714              		.loc 1 567 0 discriminator 5
 715 0334 614A     		ldr	r2, .L72
 716 0336 614B     		ldr	r3, .L72
 717 0338 1B6A     		ldr	r3, [r3, #32]
 718 033a 43F00403 		orr	r3, r3, #4
 719 033e 1362     		str	r3, [r2, #32]
 720 0340 5E4A     		ldr	r2, .L72
 721 0342 5E4B     		ldr	r3, .L72
 722 0344 1B6A     		ldr	r3, [r3, #32]
 723 0346 43F00103 		orr	r3, r3, #1
 724 034a 1362     		str	r3, [r2, #32]
 725 034c 0BE0     		b	.L50
 726              	.L52:
 727              		.loc 1 567 0 discriminator 6
 728 034e 5B4A     		ldr	r2, .L72
 729 0350 5A4B     		ldr	r3, .L72
 730 0352 1B6A     		ldr	r3, [r3, #32]
 731 0354 23F00103 		bic	r3, r3, #1
 732 0358 1362     		str	r3, [r2, #32]
 733 035a 584A     		ldr	r2, .L72
 734 035c 574B     		ldr	r3, .L72
ARM GAS  C:\Users\MATEUS~1\AppData\Local\Temp\ccmMuE16.s 			page 24


 735 035e 1B6A     		ldr	r3, [r3, #32]
 736 0360 23F00403 		bic	r3, r3, #4
 737 0364 1362     		str	r3, [r2, #32]
 738              	.L50:
 568:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     /* Check the LSE State */
 569:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 739              		.loc 1 569 0 is_stmt 1
 740 0366 7B68     		ldr	r3, [r7, #4]
 741 0368 DB68     		ldr	r3, [r3, #12]
 742 036a 002B     		cmp	r3, #0
 743 036c 15D0     		beq	.L53
 570:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     {
 571:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       /* Get Start Tick */
 572:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       tickstart = HAL_GetTick();
 744              		.loc 1 572 0
 745 036e FFF7FEFF 		bl	HAL_GetTick
 746 0372 3861     		str	r0, [r7, #16]
 573:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       
 574:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       /* Wait till LSE is ready */  
 575:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 747              		.loc 1 575 0
 748 0374 0AE0     		b	.L54
 749              	.L55:
 576:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       {
 577:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 750              		.loc 1 577 0
 751 0376 FFF7FEFF 		bl	HAL_GetTick
 752 037a 0246     		mov	r2, r0
 753 037c 3B69     		ldr	r3, [r7, #16]
 754 037e D31A     		subs	r3, r2, r3
 755 0380 41F28832 		movw	r2, #5000
 756 0384 9342     		cmp	r3, r2
 757 0386 01D9     		bls	.L54
 578:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         {
 579:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           return HAL_TIMEOUT;
 758              		.loc 1 579 0
 759 0388 0323     		movs	r3, #3
 760 038a 93E0     		b	.L19
 761              	.L54:
 575:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       {
 762              		.loc 1 575 0
 763 038c 4B4B     		ldr	r3, .L72
 764 038e 1B6A     		ldr	r3, [r3, #32]
 765 0390 03F00203 		and	r3, r3, #2
 766 0394 002B     		cmp	r3, #0
 767 0396 EED0     		beq	.L55
 768 0398 14E0     		b	.L56
 769              	.L53:
 580:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         }
 581:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       }
 582:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     }
 583:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     else
 584:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     {
 585:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       /* Get Start Tick */
 586:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       tickstart = HAL_GetTick();
 770              		.loc 1 586 0
 771 039a FFF7FEFF 		bl	HAL_GetTick
ARM GAS  C:\Users\MATEUS~1\AppData\Local\Temp\ccmMuE16.s 			page 25


 772 039e 3861     		str	r0, [r7, #16]
 587:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       
 588:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       /* Wait till LSE is disabled */  
 589:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 773              		.loc 1 589 0
 774 03a0 0AE0     		b	.L57
 775              	.L58:
 590:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       {
 591:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 776              		.loc 1 591 0
 777 03a2 FFF7FEFF 		bl	HAL_GetTick
 778 03a6 0246     		mov	r2, r0
 779 03a8 3B69     		ldr	r3, [r7, #16]
 780 03aa D31A     		subs	r3, r2, r3
 781 03ac 41F28832 		movw	r2, #5000
 782 03b0 9342     		cmp	r3, r2
 783 03b2 01D9     		bls	.L57
 592:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         {
 593:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           return HAL_TIMEOUT;
 784              		.loc 1 593 0
 785 03b4 0323     		movs	r3, #3
 786 03b6 7DE0     		b	.L19
 787              	.L57:
 589:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       {
 788              		.loc 1 589 0
 789 03b8 404B     		ldr	r3, .L72
 790 03ba 1B6A     		ldr	r3, [r3, #32]
 791 03bc 03F00203 		and	r3, r3, #2
 792 03c0 002B     		cmp	r3, #0
 793 03c2 EED1     		bne	.L58
 794              	.L56:
 594:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         }
 595:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       }
 596:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     }
 597:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 598:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     /* Require to disable power clock if necessary */
 599:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     if(pwrclkchanged == SET)
 795              		.loc 1 599 0
 796 03c4 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 797 03c6 012B     		cmp	r3, #1
 798 03c8 05D1     		bne	.L44
 600:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     {
 601:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       __HAL_RCC_PWR_CLK_DISABLE();
 799              		.loc 1 601 0
 800 03ca 3C4A     		ldr	r2, .L72
 801 03cc 3B4B     		ldr	r3, .L72
 802 03ce DB69     		ldr	r3, [r3, #28]
 803 03d0 23F08053 		bic	r3, r3, #268435456
 804 03d4 D361     		str	r3, [r2, #28]
 805              	.L44:
 806              	.LBE4:
 602:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     }
 603:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   }
 604:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 605:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** #if defined(RCC_CR_PLL2ON)
 606:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /*-------------------------------- PLL2 Configuration -----------------------*/
 607:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Check the parameters */
ARM GAS  C:\Users\MATEUS~1\AppData\Local\Temp\ccmMuE16.s 			page 26


 608:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
 609:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 610:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   {
 611:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     /* This bit can not be cleared if the PLL2 clock is used indirectly as system 
 612:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       clock (i.e. it is used as PLL clock entry that is used as system clock). */
 613:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     if((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 614:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 615:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         ((READ_BIT(RCC->CFGR2,RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 616:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     {
 617:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       return HAL_ERROR;
 618:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     }
 619:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     else
 620:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     {
 621:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       if((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 622:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       {
 623:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         /* Check the parameters */
 624:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
 625:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));
 626:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 627:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         /* Prediv2 can be written only when the PLLI2S is disabled. */
 628:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         /* Return an error only if new value is different from the programmed value */
 629:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         if (HAL_IS_BIT_SET(RCC->CR,RCC_CR_PLL3ON) && \
 630:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 631:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         {
 632:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           return HAL_ERROR;
 633:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         }
 634:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         
 635:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         /* Disable the main PLL2. */
 636:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         __HAL_RCC_PLL2_DISABLE();
 637:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         
 638:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         /* Get Start Tick */
 639:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         tickstart = HAL_GetTick();
 640:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         
 641:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         /* Wait till PLL2 is disabled */
 642:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 643:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         {
 644:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           if((HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 645:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           {
 646:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****             return HAL_TIMEOUT;
 647:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           }
 648:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         }
 649:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         
 650:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         /* Configure the HSE prediv2 factor --------------------------------*/
 651:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 652:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 653:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         /* Configure the main PLL2 multiplication factors. */
 654:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 655:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         
 656:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         /* Enable the main PLL2. */
 657:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         __HAL_RCC_PLL2_ENABLE();
 658:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         
 659:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         /* Get Start Tick */
 660:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         tickstart = HAL_GetTick();
 661:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         
 662:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         /* Wait till PLL2 is ready */
 663:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 664:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         {
ARM GAS  C:\Users\MATEUS~1\AppData\Local\Temp\ccmMuE16.s 			page 27


 665:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           if((HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 666:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           {
 667:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****             return HAL_TIMEOUT;
 668:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           }
 669:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         }
 670:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       }
 671:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       else
 672:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       {
 673:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****        /* Set PREDIV1 source to HSE */
 674:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 675:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 676:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         /* Disable the main PLL2. */
 677:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         __HAL_RCC_PLL2_DISABLE();
 678:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****  
 679:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         /* Get Start Tick */
 680:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         tickstart = HAL_GetTick();
 681:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         
 682:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         /* Wait till PLL2 is disabled */  
 683:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 684:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         {
 685:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           if((HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 686:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           {
 687:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****             return HAL_TIMEOUT;
 688:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           }
 689:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         }
 690:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       }
 691:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     }
 692:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   }
 693:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 694:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** #endif /* RCC_CR_PLL2ON */
 695:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /*-------------------------------- PLL Configuration -----------------------*/
 696:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Check the parameters */
 697:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 698:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 807              		.loc 1 698 0
 808 03d6 7B68     		ldr	r3, [r7, #4]
 809 03d8 DB69     		ldr	r3, [r3, #28]
 810 03da 002B     		cmp	r3, #0
 811 03dc 69D0     		beq	.L59
 699:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   {
 700:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     /* Check if the PLL is used as system clock or not */
 701:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 812              		.loc 1 701 0
 813 03de 374B     		ldr	r3, .L72
 814 03e0 5B68     		ldr	r3, [r3, #4]
 815 03e2 03F00C03 		and	r3, r3, #12
 816 03e6 082B     		cmp	r3, #8
 817 03e8 61D0     		beq	.L60
 702:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     { 
 703:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 818              		.loc 1 703 0
 819 03ea 7B68     		ldr	r3, [r7, #4]
 820 03ec DB69     		ldr	r3, [r3, #28]
 821 03ee 022B     		cmp	r3, #2
 822 03f0 46D1     		bne	.L61
 704:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       {
 705:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         /* Check the parameters */
ARM GAS  C:\Users\MATEUS~1\AppData\Local\Temp\ccmMuE16.s 			page 28


 706:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 707:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 708:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   
 709:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         /* Disable the main PLL. */
 710:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         __HAL_RCC_PLL_DISABLE();
 823              		.loc 1 710 0
 824 03f2 344B     		ldr	r3, .L72+8
 825 03f4 0022     		movs	r2, #0
 826 03f6 1A60     		str	r2, [r3]
 711:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         
 712:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         /* Get Start Tick */
 713:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         tickstart = HAL_GetTick();
 827              		.loc 1 713 0
 828 03f8 FFF7FEFF 		bl	HAL_GetTick
 829 03fc 3861     		str	r0, [r7, #16]
 714:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         
 715:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         /* Wait till PLL is disabled */
 716:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 830              		.loc 1 716 0
 831 03fe 08E0     		b	.L62
 832              	.L63:
 717:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         {
 718:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 833              		.loc 1 718 0
 834 0400 FFF7FEFF 		bl	HAL_GetTick
 835 0404 0246     		mov	r2, r0
 836 0406 3B69     		ldr	r3, [r7, #16]
 837 0408 D31A     		subs	r3, r2, r3
 838 040a 022B     		cmp	r3, #2
 839 040c 01D9     		bls	.L62
 719:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           {
 720:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****             return HAL_TIMEOUT;
 840              		.loc 1 720 0
 841 040e 0323     		movs	r3, #3
 842 0410 50E0     		b	.L19
 843              	.L62:
 716:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         {
 844              		.loc 1 716 0
 845 0412 2A4B     		ldr	r3, .L72
 846 0414 1B68     		ldr	r3, [r3]
 847 0416 03F00073 		and	r3, r3, #33554432
 848 041a 002B     		cmp	r3, #0
 849 041c F0D1     		bne	.L63
 721:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           }
 722:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         }
 723:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 724:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         /* Configure the HSE prediv factor --------------------------------*/
 725:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         /* It can be written only when the PLL is disabled. Not used in PLL source is different tha
 726:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 850              		.loc 1 726 0
 851 041e 7B68     		ldr	r3, [r7, #4]
 852 0420 1B6A     		ldr	r3, [r3, #32]
 853 0422 B3F5803F 		cmp	r3, #65536
 854 0426 08D1     		bne	.L64
 727:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         {
 728:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           /* Check the parameter */
 729:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
ARM GAS  C:\Users\MATEUS~1\AppData\Local\Temp\ccmMuE16.s 			page 29


 730:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** #if defined(RCC_CFGR2_PREDIV1SRC)
 731:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));
 732:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           
 733:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           /* Set PREDIV1 source */
 734:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 735:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** #endif /* RCC_CFGR2_PREDIV1SRC */
 736:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 737:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           /* Set PREDIV1 Value */
 738:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 855              		.loc 1 738 0
 856 0428 2449     		ldr	r1, .L72
 857 042a 244B     		ldr	r3, .L72
 858 042c 5B68     		ldr	r3, [r3, #4]
 859 042e 23F40032 		bic	r2, r3, #131072
 860 0432 7B68     		ldr	r3, [r7, #4]
 861 0434 9B68     		ldr	r3, [r3, #8]
 862 0436 1343     		orrs	r3, r3, r2
 863 0438 4B60     		str	r3, [r1, #4]
 864              	.L64:
 739:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         }
 740:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 741:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         /* Configure the main PLL clock source and multiplication factors. */
 742:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 865              		.loc 1 742 0
 866 043a 2048     		ldr	r0, .L72
 867 043c 1F4B     		ldr	r3, .L72
 868 043e 5B68     		ldr	r3, [r3, #4]
 869 0440 23F47412 		bic	r2, r3, #3997696
 870 0444 7B68     		ldr	r3, [r7, #4]
 871 0446 196A     		ldr	r1, [r3, #32]
 872 0448 7B68     		ldr	r3, [r7, #4]
 873 044a 5B6A     		ldr	r3, [r3, #36]
 874 044c 0B43     		orrs	r3, r3, r1
 875 044e 1343     		orrs	r3, r3, r2
 876 0450 4360     		str	r3, [r0, #4]
 743:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****                              RCC_OscInitStruct->PLL.PLLMUL);
 744:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         /* Enable the main PLL. */
 745:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         __HAL_RCC_PLL_ENABLE();
 877              		.loc 1 745 0
 878 0452 1C4B     		ldr	r3, .L72+8
 879 0454 0122     		movs	r2, #1
 880 0456 1A60     		str	r2, [r3]
 746:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         
 747:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         /* Get Start Tick */
 748:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         tickstart = HAL_GetTick();
 881              		.loc 1 748 0
 882 0458 FFF7FEFF 		bl	HAL_GetTick
 883 045c 3861     		str	r0, [r7, #16]
 749:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         
 750:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         /* Wait till PLL is ready */
 751:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 884              		.loc 1 751 0
 885 045e 08E0     		b	.L65
 886              	.L66:
 752:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         {
 753:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 887              		.loc 1 753 0
ARM GAS  C:\Users\MATEUS~1\AppData\Local\Temp\ccmMuE16.s 			page 30


 888 0460 FFF7FEFF 		bl	HAL_GetTick
 889 0464 0246     		mov	r2, r0
 890 0466 3B69     		ldr	r3, [r7, #16]
 891 0468 D31A     		subs	r3, r2, r3
 892 046a 022B     		cmp	r3, #2
 893 046c 01D9     		bls	.L65
 754:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           {
 755:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****             return HAL_TIMEOUT;
 894              		.loc 1 755 0
 895 046e 0323     		movs	r3, #3
 896 0470 20E0     		b	.L19
 897              	.L65:
 751:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         {
 898              		.loc 1 751 0
 899 0472 124B     		ldr	r3, .L72
 900 0474 1B68     		ldr	r3, [r3]
 901 0476 03F00073 		and	r3, r3, #33554432
 902 047a 002B     		cmp	r3, #0
 903 047c F0D0     		beq	.L66
 904 047e 18E0     		b	.L59
 905              	.L61:
 756:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           }
 757:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         }
 758:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       }
 759:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       else
 760:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       {
 761:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         /* Disable the main PLL. */
 762:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         __HAL_RCC_PLL_DISABLE();
 906              		.loc 1 762 0
 907 0480 104B     		ldr	r3, .L72+8
 908 0482 0022     		movs	r2, #0
 909 0484 1A60     		str	r2, [r3]
 763:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****  
 764:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         /* Get Start Tick */
 765:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         tickstart = HAL_GetTick();
 910              		.loc 1 765 0
 911 0486 FFF7FEFF 		bl	HAL_GetTick
 912 048a 3861     		str	r0, [r7, #16]
 766:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         
 767:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         /* Wait till PLL is disabled */  
 768:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 913              		.loc 1 768 0
 914 048c 08E0     		b	.L67
 915              	.L68:
 769:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         {
 770:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 916              		.loc 1 770 0
 917 048e FFF7FEFF 		bl	HAL_GetTick
 918 0492 0246     		mov	r2, r0
 919 0494 3B69     		ldr	r3, [r7, #16]
 920 0496 D31A     		subs	r3, r2, r3
 921 0498 022B     		cmp	r3, #2
 922 049a 01D9     		bls	.L67
 771:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           {
 772:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****             return HAL_TIMEOUT;
 923              		.loc 1 772 0
 924 049c 0323     		movs	r3, #3
ARM GAS  C:\Users\MATEUS~1\AppData\Local\Temp\ccmMuE16.s 			page 31


 925 049e 09E0     		b	.L19
 926              	.L67:
 768:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         {
 927              		.loc 1 768 0
 928 04a0 064B     		ldr	r3, .L72
 929 04a2 1B68     		ldr	r3, [r3]
 930 04a4 03F00073 		and	r3, r3, #33554432
 931 04a8 002B     		cmp	r3, #0
 932 04aa F0D1     		bne	.L68
 933 04ac 01E0     		b	.L59
 934              	.L60:
 773:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           }
 774:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         }
 775:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       }
 776:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     }
 777:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     else
 778:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     {
 779:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       return HAL_ERROR;
 935              		.loc 1 779 0
 936 04ae 0123     		movs	r3, #1
 937 04b0 00E0     		b	.L19
 938              	.L59:
 780:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     }
 781:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   }
 782:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   
 783:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   return HAL_OK;
 939              		.loc 1 783 0
 940 04b2 0023     		movs	r3, #0
 941              	.L19:
 784:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** }
 942              		.loc 1 784 0
 943 04b4 1846     		mov	r0, r3
 944 04b6 1837     		adds	r7, r7, #24
 945              	.LCFI8:
 946              		.cfi_def_cfa_offset 8
 947 04b8 BD46     		mov	sp, r7
 948              	.LCFI9:
 949              		.cfi_def_cfa_register 13
 950              		@ sp needed
 951 04ba 80BD     		pop	{r7, pc}
 952              	.L73:
 953              		.align	2
 954              	.L72:
 955 04bc 00100240 		.word	1073876992
 956 04c0 00700040 		.word	1073770496
 957 04c4 60004242 		.word	1111621728
 958              		.cfi_endproc
 959              	.LFE65:
 961              		.section	.text.HAL_RCC_ClockConfig,"ax",%progbits
 962              		.align	2
 963              		.global	HAL_RCC_ClockConfig
 964              		.thumb
 965              		.thumb_func
 967              	HAL_RCC_ClockConfig:
 968              	.LFB66:
 785:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 786:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** /**
ARM GAS  C:\Users\MATEUS~1\AppData\Local\Temp\ccmMuE16.s 			page 32


 787:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @brief  Initializes the CPU, AHB and APB buses clocks according to the specified 
 788:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *         parameters in the RCC_ClkInitStruct.
 789:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @param  RCC_ClkInitStruct pointer to an RCC_OscInitTypeDef structure that
 790:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *         contains the configuration information for the RCC peripheral.
 791:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @param  FLatency FLASH Latency                   
 792:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *          The value of this parameter depend on device used within the same series
 793:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
 794:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *         and updated by @ref HAL_RCC_GetHCLKFreq() function called within this function
 795:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *
 796:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @note   The HSI is used (enabled by hardware) as system clock source after
 797:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *         start-up from Reset, wake-up from STOP and STANDBY mode, or in case
 798:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *         of failure of the HSE used directly or indirectly as system clock
 799:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *         (if the Clock Security System CSS is enabled).
 800:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *           
 801:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @note   A switch from one clock source to another occurs only if the target
 802:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *         clock source is ready (clock stable after start-up delay or PLL locked). 
 803:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *         If a clock source which is not yet ready is selected, the switch will
 804:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *         occur when the clock source will be ready. 
 805:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
 806:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *         currently used as system clock source.
 807:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @retval HAL status
 808:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   */
 809:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
 810:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** {
 969              		.loc 1 810 0
 970              		.cfi_startproc
 971              		@ args = 0, pretend = 0, frame = 16
 972              		@ frame_needed = 1, uses_anonymous_args = 0
 973 0000 80B5     		push	{r7, lr}
 974              	.LCFI10:
 975              		.cfi_def_cfa_offset 8
 976              		.cfi_offset 7, -8
 977              		.cfi_offset 14, -4
 978 0002 84B0     		sub	sp, sp, #16
 979              	.LCFI11:
 980              		.cfi_def_cfa_offset 24
 981 0004 00AF     		add	r7, sp, #0
 982              	.LCFI12:
 983              		.cfi_def_cfa_register 7
 984 0006 7860     		str	r0, [r7, #4]
 985 0008 3960     		str	r1, [r7]
 811:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   uint32_t tickstart = 0U;
 986              		.loc 1 811 0
 987 000a 0023     		movs	r3, #0
 988 000c FB60     		str	r3, [r7, #12]
 812:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   
 813:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Check the parameters */
 814:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   assert_param(RCC_ClkInitStruct != NULL);
 815:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 816:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   assert_param(IS_FLASH_LATENCY(FLatency));
 817:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 818:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
 819:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   must be correctly programmed according to the frequency of the CPU clock 
 820:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     (HCLK) of the device. */
 821:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 822:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** #if defined(FLASH_ACR_LATENCY)
 823:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Increasing the number of wait states because of higher CPU frequency */
ARM GAS  C:\Users\MATEUS~1\AppData\Local\Temp\ccmMuE16.s 			page 33


 824:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 989              		.loc 1 824 0
 990 000e 724B     		ldr	r3, .L93
 991 0010 1B68     		ldr	r3, [r3]
 992 0012 03F00702 		and	r2, r3, #7
 993 0016 3B68     		ldr	r3, [r7]
 994 0018 9A42     		cmp	r2, r3
 995 001a 10D2     		bcs	.L75
 825:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   {    
 826:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
 827:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     __HAL_FLASH_SET_LATENCY(FLatency);
 996              		.loc 1 827 0
 997 001c 6E49     		ldr	r1, .L93
 998 001e 6E4B     		ldr	r3, .L93
 999 0020 1B68     		ldr	r3, [r3]
 1000 0022 23F00702 		bic	r2, r3, #7
 1001 0026 3B68     		ldr	r3, [r7]
 1002 0028 1343     		orrs	r3, r3, r2
 1003 002a 0B60     		str	r3, [r1]
 828:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     
 829:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     /* Check that the new number of wait states is taken into account to access the Flash
 830:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     memory by reading the FLASH_ACR register */
 831:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 1004              		.loc 1 831 0
 1005 002c 6A4B     		ldr	r3, .L93
 1006 002e 1B68     		ldr	r3, [r3]
 1007 0030 03F00702 		and	r2, r3, #7
 1008 0034 3B68     		ldr	r3, [r7]
 1009 0036 9A42     		cmp	r2, r3
 1010 0038 01D0     		beq	.L75
 832:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     {
 833:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       return HAL_ERROR;
 1011              		.loc 1 833 0
 1012 003a 0123     		movs	r3, #1
 1013 003c C8E0     		b	.L76
 1014              	.L75:
 834:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     }
 835:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   }
 836:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 837:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** #endif /* FLASH_ACR_LATENCY */
 838:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /*-------------------------- HCLK Configuration --------------------------*/
 839:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 1015              		.loc 1 839 0
 1016 003e 7B68     		ldr	r3, [r7, #4]
 1017 0040 1B68     		ldr	r3, [r3]
 1018 0042 03F00203 		and	r3, r3, #2
 1019 0046 002B     		cmp	r3, #0
 1020 0048 08D0     		beq	.L77
 840:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   {
 841:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 842:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 1021              		.loc 1 842 0
 1022 004a 6449     		ldr	r1, .L93+4
 1023 004c 634B     		ldr	r3, .L93+4
 1024 004e 5B68     		ldr	r3, [r3, #4]
 1025 0050 23F0F002 		bic	r2, r3, #240
 1026 0054 7B68     		ldr	r3, [r7, #4]
ARM GAS  C:\Users\MATEUS~1\AppData\Local\Temp\ccmMuE16.s 			page 34


 1027 0056 9B68     		ldr	r3, [r3, #8]
 1028 0058 1343     		orrs	r3, r3, r2
 1029 005a 4B60     		str	r3, [r1, #4]
 1030              	.L77:
 843:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   }
 844:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 845:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /*------------------------- SYSCLK Configuration ---------------------------*/ 
 846:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 1031              		.loc 1 846 0
 1032 005c 7B68     		ldr	r3, [r7, #4]
 1033 005e 1B68     		ldr	r3, [r3]
 1034 0060 03F00103 		and	r3, r3, #1
 1035 0064 002B     		cmp	r3, #0
 1036 0066 6AD0     		beq	.L78
 847:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   {    
 848:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 849:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     
 850:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     /* HSE is selected as System Clock Source */
 851:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 1037              		.loc 1 851 0
 1038 0068 7B68     		ldr	r3, [r7, #4]
 1039 006a 5B68     		ldr	r3, [r3, #4]
 1040 006c 012B     		cmp	r3, #1
 1041 006e 07D1     		bne	.L79
 852:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     {
 853:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       /* Check the HSE ready flag */  
 854:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 1042              		.loc 1 854 0
 1043 0070 5A4B     		ldr	r3, .L93+4
 1044 0072 1B68     		ldr	r3, [r3]
 1045 0074 03F40033 		and	r3, r3, #131072
 1046 0078 002B     		cmp	r3, #0
 1047 007a 15D1     		bne	.L80
 855:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       {
 856:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         return HAL_ERROR;
 1048              		.loc 1 856 0
 1049 007c 0123     		movs	r3, #1
 1050 007e A7E0     		b	.L76
 1051              	.L79:
 857:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       }
 858:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     }
 859:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     /* PLL is selected as System Clock Source */
 860:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 1052              		.loc 1 860 0
 1053 0080 7B68     		ldr	r3, [r7, #4]
 1054 0082 5B68     		ldr	r3, [r3, #4]
 1055 0084 022B     		cmp	r3, #2
 1056 0086 07D1     		bne	.L81
 861:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     {
 862:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       /* Check the PLL ready flag */  
 863:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 1057              		.loc 1 863 0
 1058 0088 544B     		ldr	r3, .L93+4
 1059 008a 1B68     		ldr	r3, [r3]
 1060 008c 03F00073 		and	r3, r3, #33554432
 1061 0090 002B     		cmp	r3, #0
 1062 0092 09D1     		bne	.L80
ARM GAS  C:\Users\MATEUS~1\AppData\Local\Temp\ccmMuE16.s 			page 35


 864:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       {
 865:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         return HAL_ERROR;
 1063              		.loc 1 865 0
 1064 0094 0123     		movs	r3, #1
 1065 0096 9BE0     		b	.L76
 1066              	.L81:
 866:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       }
 867:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     }
 868:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     /* HSI is selected as System Clock Source */
 869:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     else
 870:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     {
 871:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       /* Check the HSI ready flag */  
 872:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 1067              		.loc 1 872 0
 1068 0098 504B     		ldr	r3, .L93+4
 1069 009a 1B68     		ldr	r3, [r3]
 1070 009c 03F00203 		and	r3, r3, #2
 1071 00a0 002B     		cmp	r3, #0
 1072 00a2 01D1     		bne	.L80
 873:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       {
 874:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         return HAL_ERROR;
 1073              		.loc 1 874 0
 1074 00a4 0123     		movs	r3, #1
 1075 00a6 93E0     		b	.L76
 1076              	.L80:
 875:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       }
 876:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     }
 877:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 1077              		.loc 1 877 0
 1078 00a8 4C49     		ldr	r1, .L93+4
 1079 00aa 4C4B     		ldr	r3, .L93+4
 1080 00ac 5B68     		ldr	r3, [r3, #4]
 1081 00ae 23F00302 		bic	r2, r3, #3
 1082 00b2 7B68     		ldr	r3, [r7, #4]
 1083 00b4 5B68     		ldr	r3, [r3, #4]
 1084 00b6 1343     		orrs	r3, r3, r2
 1085 00b8 4B60     		str	r3, [r1, #4]
 878:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 879:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     /* Get Start Tick */
 880:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     tickstart = HAL_GetTick();
 1086              		.loc 1 880 0
 1087 00ba FFF7FEFF 		bl	HAL_GetTick
 1088 00be F860     		str	r0, [r7, #12]
 881:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     
 882:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 1089              		.loc 1 882 0
 1090 00c0 7B68     		ldr	r3, [r7, #4]
 1091 00c2 5B68     		ldr	r3, [r3, #4]
 1092 00c4 012B     		cmp	r3, #1
 1093 00c6 12D1     		bne	.L82
 883:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     {
 884:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 1094              		.loc 1 884 0
 1095 00c8 0AE0     		b	.L83
 1096              	.L84:
 885:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       {
 886:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
ARM GAS  C:\Users\MATEUS~1\AppData\Local\Temp\ccmMuE16.s 			page 36


 1097              		.loc 1 886 0
 1098 00ca FFF7FEFF 		bl	HAL_GetTick
 1099 00ce 0246     		mov	r2, r0
 1100 00d0 FB68     		ldr	r3, [r7, #12]
 1101 00d2 D31A     		subs	r3, r2, r3
 1102 00d4 41F28832 		movw	r2, #5000
 1103 00d8 9342     		cmp	r3, r2
 1104 00da 01D9     		bls	.L83
 887:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         {
 888:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           return HAL_TIMEOUT;
 1105              		.loc 1 888 0
 1106 00dc 0323     		movs	r3, #3
 1107 00de 77E0     		b	.L76
 1108              	.L83:
 884:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       {
 1109              		.loc 1 884 0
 1110 00e0 3E4B     		ldr	r3, .L93+4
 1111 00e2 5B68     		ldr	r3, [r3, #4]
 1112 00e4 03F00C03 		and	r3, r3, #12
 1113 00e8 042B     		cmp	r3, #4
 1114 00ea EED1     		bne	.L84
 1115 00ec 27E0     		b	.L78
 1116              	.L82:
 889:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         }
 890:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       }
 891:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     }
 892:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 1117              		.loc 1 892 0
 1118 00ee 7B68     		ldr	r3, [r7, #4]
 1119 00f0 5B68     		ldr	r3, [r3, #4]
 1120 00f2 022B     		cmp	r3, #2
 1121 00f4 1DD1     		bne	.L88
 893:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     {
 894:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 1122              		.loc 1 894 0
 1123 00f6 0AE0     		b	.L86
 1124              	.L87:
 895:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       {
 896:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 1125              		.loc 1 896 0
 1126 00f8 FFF7FEFF 		bl	HAL_GetTick
 1127 00fc 0246     		mov	r2, r0
 1128 00fe FB68     		ldr	r3, [r7, #12]
 1129 0100 D31A     		subs	r3, r2, r3
 1130 0102 41F28832 		movw	r2, #5000
 1131 0106 9342     		cmp	r3, r2
 1132 0108 01D9     		bls	.L86
 897:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         {
 898:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           return HAL_TIMEOUT;
 1133              		.loc 1 898 0
 1134 010a 0323     		movs	r3, #3
 1135 010c 60E0     		b	.L76
 1136              	.L86:
 894:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       {
 1137              		.loc 1 894 0
 1138 010e 334B     		ldr	r3, .L93+4
 1139 0110 5B68     		ldr	r3, [r3, #4]
ARM GAS  C:\Users\MATEUS~1\AppData\Local\Temp\ccmMuE16.s 			page 37


 1140 0112 03F00C03 		and	r3, r3, #12
 1141 0116 082B     		cmp	r3, #8
 1142 0118 EED1     		bne	.L87
 1143 011a 10E0     		b	.L78
 1144              	.L89:
 899:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         }
 900:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       }
 901:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     }
 902:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     else
 903:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     {
 904:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 905:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       {
 906:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 1145              		.loc 1 906 0
 1146 011c FFF7FEFF 		bl	HAL_GetTick
 1147 0120 0246     		mov	r2, r0
 1148 0122 FB68     		ldr	r3, [r7, #12]
 1149 0124 D31A     		subs	r3, r2, r3
 1150 0126 41F28832 		movw	r2, #5000
 1151 012a 9342     		cmp	r3, r2
 1152 012c 01D9     		bls	.L88
 907:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         {
 908:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           return HAL_TIMEOUT;
 1153              		.loc 1 908 0
 1154 012e 0323     		movs	r3, #3
 1155 0130 4EE0     		b	.L76
 1156              	.L88:
 904:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       {
 1157              		.loc 1 904 0
 1158 0132 2A4B     		ldr	r3, .L93+4
 1159 0134 5B68     		ldr	r3, [r3, #4]
 1160 0136 03F00C03 		and	r3, r3, #12
 1161 013a 002B     		cmp	r3, #0
 1162 013c EED1     		bne	.L89
 1163              	.L78:
 909:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         }
 910:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       }
 911:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     }      
 912:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   }    
 913:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** #if defined(FLASH_ACR_LATENCY)
 914:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Decreasing the number of wait states because of lower CPU frequency */
 915:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 1164              		.loc 1 915 0
 1165 013e 264B     		ldr	r3, .L93
 1166 0140 1B68     		ldr	r3, [r3]
 1167 0142 03F00702 		and	r2, r3, #7
 1168 0146 3B68     		ldr	r3, [r7]
 1169 0148 9A42     		cmp	r2, r3
 1170 014a 10D9     		bls	.L90
 916:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   {    
 917:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
 918:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     __HAL_FLASH_SET_LATENCY(FLatency);
 1171              		.loc 1 918 0
 1172 014c 2249     		ldr	r1, .L93
 1173 014e 224B     		ldr	r3, .L93
 1174 0150 1B68     		ldr	r3, [r3]
 1175 0152 23F00702 		bic	r2, r3, #7
ARM GAS  C:\Users\MATEUS~1\AppData\Local\Temp\ccmMuE16.s 			page 38


 1176 0156 3B68     		ldr	r3, [r7]
 1177 0158 1343     		orrs	r3, r3, r2
 1178 015a 0B60     		str	r3, [r1]
 919:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     
 920:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     /* Check that the new number of wait states is taken into account to access the Flash
 921:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     memory by reading the FLASH_ACR register */
 922:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 1179              		.loc 1 922 0
 1180 015c 1E4B     		ldr	r3, .L93
 1181 015e 1B68     		ldr	r3, [r3]
 1182 0160 03F00702 		and	r2, r3, #7
 1183 0164 3B68     		ldr	r3, [r7]
 1184 0166 9A42     		cmp	r2, r3
 1185 0168 01D0     		beq	.L90
 923:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     {
 924:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       return HAL_ERROR;
 1186              		.loc 1 924 0
 1187 016a 0123     		movs	r3, #1
 1188 016c 30E0     		b	.L76
 1189              	.L90:
 925:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     }
 926:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   }    
 927:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** #endif /* FLASH_ACR_LATENCY */
 928:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 929:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /*-------------------------- PCLK1 Configuration ---------------------------*/ 
 930:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 1190              		.loc 1 930 0
 1191 016e 7B68     		ldr	r3, [r7, #4]
 1192 0170 1B68     		ldr	r3, [r3]
 1193 0172 03F00403 		and	r3, r3, #4
 1194 0176 002B     		cmp	r3, #0
 1195 0178 08D0     		beq	.L91
 931:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   {
 932:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 933:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 1196              		.loc 1 933 0
 1197 017a 1849     		ldr	r1, .L93+4
 1198 017c 174B     		ldr	r3, .L93+4
 1199 017e 5B68     		ldr	r3, [r3, #4]
 1200 0180 23F4E062 		bic	r2, r3, #1792
 1201 0184 7B68     		ldr	r3, [r7, #4]
 1202 0186 DB68     		ldr	r3, [r3, #12]
 1203 0188 1343     		orrs	r3, r3, r2
 1204 018a 4B60     		str	r3, [r1, #4]
 1205              	.L91:
 934:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   }
 935:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   
 936:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /*-------------------------- PCLK2 Configuration ---------------------------*/ 
 937:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 1206              		.loc 1 937 0
 1207 018c 7B68     		ldr	r3, [r7, #4]
 1208 018e 1B68     		ldr	r3, [r3]
 1209 0190 03F00803 		and	r3, r3, #8
 1210 0194 002B     		cmp	r3, #0
 1211 0196 09D0     		beq	.L92
 938:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   {
 939:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
ARM GAS  C:\Users\MATEUS~1\AppData\Local\Temp\ccmMuE16.s 			page 39


 940:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 1212              		.loc 1 940 0
 1213 0198 1049     		ldr	r1, .L93+4
 1214 019a 104B     		ldr	r3, .L93+4
 1215 019c 5B68     		ldr	r3, [r3, #4]
 1216 019e 23F46052 		bic	r2, r3, #14336
 1217 01a2 7B68     		ldr	r3, [r7, #4]
 1218 01a4 1B69     		ldr	r3, [r3, #16]
 1219 01a6 DB00     		lsls	r3, r3, #3
 1220 01a8 1343     		orrs	r3, r3, r2
 1221 01aa 4B60     		str	r3, [r1, #4]
 1222              	.L92:
 941:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   }
 942:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****  
 943:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Update the SystemCoreClock global variable */
 944:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CF
 1223              		.loc 1 944 0
 1224 01ac FFF7FEFF 		bl	HAL_RCC_GetSysClockFreq
 1225 01b0 0146     		mov	r1, r0
 1226 01b2 0A4B     		ldr	r3, .L93+4
 1227 01b4 5B68     		ldr	r3, [r3, #4]
 1228 01b6 03F0F003 		and	r3, r3, #240
 1229 01ba 1B09     		lsrs	r3, r3, #4
 1230 01bc 084A     		ldr	r2, .L93+8
 1231 01be D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 1232 01c0 21FA03F3 		lsr	r3, r1, r3
 1233 01c4 074A     		ldr	r2, .L93+12
 1234 01c6 1360     		str	r3, [r2]
 945:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 946:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Configure the source of time base considering new system clocks settings*/
 947:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   HAL_InitTick (TICK_INT_PRIORITY);
 1235              		.loc 1 947 0
 1236 01c8 0020     		movs	r0, #0
 1237 01ca FFF7FEFF 		bl	HAL_InitTick
 948:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   
 949:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   return HAL_OK;
 1238              		.loc 1 949 0
 1239 01ce 0023     		movs	r3, #0
 1240              	.L76:
 950:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** }
 1241              		.loc 1 950 0
 1242 01d0 1846     		mov	r0, r3
 1243 01d2 1037     		adds	r7, r7, #16
 1244              	.LCFI13:
 1245              		.cfi_def_cfa_offset 8
 1246 01d4 BD46     		mov	sp, r7
 1247              	.LCFI14:
 1248              		.cfi_def_cfa_register 13
 1249              		@ sp needed
 1250 01d6 80BD     		pop	{r7, pc}
 1251              	.L94:
 1252              		.align	2
 1253              	.L93:
 1254 01d8 00200240 		.word	1073881088
 1255 01dc 00100240 		.word	1073876992
 1256 01e0 00000000 		.word	AHBPrescTable
 1257 01e4 00000000 		.word	SystemCoreClock
ARM GAS  C:\Users\MATEUS~1\AppData\Local\Temp\ccmMuE16.s 			page 40


 1258              		.cfi_endproc
 1259              	.LFE66:
 1261              		.section	.text.HAL_RCC_MCOConfig,"ax",%progbits
 1262              		.align	2
 1263              		.global	HAL_RCC_MCOConfig
 1264              		.thumb
 1265              		.thumb_func
 1267              	HAL_RCC_MCOConfig:
 1268              	.LFB67:
 951:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 952:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** /**
 953:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @}
 954:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   */
 955:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 956:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** /** @defgroup RCC_Exported_Functions_Group2 Peripheral Control functions
 957:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *  @brief   RCC clocks control functions
 958:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *
 959:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   @verbatim   
 960:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   ===============================================================================
 961:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****                   ##### Peripheral Control functions #####
 962:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   ===============================================================================  
 963:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     [..]
 964:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     This subsection provides a set of functions allowing to control the RCC Clocks 
 965:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     frequencies.
 966:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 967:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   @endverbatim
 968:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @{
 969:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   */
 970:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 971:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** /**
 972:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @brief  Selects the clock source to output on MCO pin.
 973:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @note   MCO pin should be configured in alternate function mode.
 974:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @param  RCC_MCOx specifies the output direction for the clock source.
 975:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *          This parameter can be one of the following values:
 976:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *            @arg @ref RCC_MCO1 Clock source to output on MCO1 pin(PA8).
 977:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @param  RCC_MCOSource specifies the clock source to output.
 978:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *          This parameter can be one of the following values:
 979:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *            @arg @ref RCC_MCO1SOURCE_NOCLOCK     No clock selected as MCO clock
 980:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *            @arg @ref RCC_MCO1SOURCE_SYSCLK      System clock selected as MCO clock
 981:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *            @arg @ref RCC_MCO1SOURCE_HSI         HSI selected as MCO clock
 982:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *            @arg @ref RCC_MCO1SOURCE_HSE         HSE selected as MCO clock
 983:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   @if STM32F105xC
 984:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *            @arg @ref RCC_MCO1SOURCE_PLLCLK       PLL clock divided by 2 selected as MCO source
 985:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *            @arg @ref RCC_MCO1SOURCE_PLL2CLK      PLL2 clock selected as MCO source
 986:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *            @arg @ref RCC_MCO1SOURCE_PLL3CLK_DIV2 PLL3 clock divided by 2 selected as MCO source
 987:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *            @arg @ref RCC_MCO1SOURCE_EXT_HSE      XT1 external 3-25 MHz oscillator clock selecte
 988:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *            @arg @ref RCC_MCO1SOURCE_PLL3CLK      PLL3 clock selected as MCO source
 989:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   @endif
 990:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   @if STM32F107xC
 991:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *            @arg @ref RCC_MCO1SOURCE_PLLCLK       PLL clock divided by 2 selected as MCO source
 992:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *            @arg @ref RCC_MCO1SOURCE_PLL2CLK      PLL2 clock selected as MCO source
 993:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *            @arg @ref RCC_MCO1SOURCE_PLL3CLK_DIV2 PLL3 clock divided by 2 selected as MCO source
 994:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *            @arg @ref RCC_MCO1SOURCE_EXT_HSE XT1  external 3-25 MHz oscillator clock selected as
 995:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *            @arg @ref RCC_MCO1SOURCE_PLL3CLK      PLL3 clock selected as MCO source
 996:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   @endif
 997:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @param  RCC_MCODiv specifies the MCO DIV.
 998:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *          This parameter can be one of the following values:
ARM GAS  C:\Users\MATEUS~1\AppData\Local\Temp\ccmMuE16.s 			page 41


 999:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *            @arg @ref RCC_MCODIV_1 no division applied to MCO clock
1000:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @retval None
1001:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   */
1002:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
1003:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** {
 1269              		.loc 1 1003 0
 1270              		.cfi_startproc
 1271              		@ args = 0, pretend = 0, frame = 40
 1272              		@ frame_needed = 1, uses_anonymous_args = 0
 1273 0000 80B5     		push	{r7, lr}
 1274              	.LCFI15:
 1275              		.cfi_def_cfa_offset 8
 1276              		.cfi_offset 7, -8
 1277              		.cfi_offset 14, -4
 1278 0002 8AB0     		sub	sp, sp, #40
 1279              	.LCFI16:
 1280              		.cfi_def_cfa_offset 48
 1281 0004 00AF     		add	r7, sp, #0
 1282              	.LCFI17:
 1283              		.cfi_def_cfa_register 7
 1284 0006 F860     		str	r0, [r7, #12]
 1285 0008 B960     		str	r1, [r7, #8]
 1286 000a 7A60     		str	r2, [r7, #4]
1004:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   GPIO_InitTypeDef gpio = {0U};
 1287              		.loc 1 1004 0
 1288 000c 07F11803 		add	r3, r7, #24
 1289 0010 0022     		movs	r2, #0
 1290 0012 1A60     		str	r2, [r3]
 1291 0014 5A60     		str	r2, [r3, #4]
 1292 0016 9A60     		str	r2, [r3, #8]
 1293 0018 DA60     		str	r2, [r3, #12]
1005:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
1006:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Check the parameters */
1007:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   assert_param(IS_RCC_MCO(RCC_MCOx));
1008:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   assert_param(IS_RCC_MCODIV(RCC_MCODiv));
1009:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));
1010:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
1011:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Prevent unused argument(s) compilation warning */
1012:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   UNUSED(RCC_MCOx);
1013:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   UNUSED(RCC_MCODiv);
1014:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
1015:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Configure the MCO1 pin in alternate function mode */
1016:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   gpio.Mode      = GPIO_MODE_AF_PP;
 1294              		.loc 1 1016 0
 1295 001a 0223     		movs	r3, #2
 1296 001c FB61     		str	r3, [r7, #28]
1017:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   gpio.Speed     = GPIO_SPEED_FREQ_HIGH;
 1297              		.loc 1 1017 0
 1298 001e 0323     		movs	r3, #3
 1299 0020 7B62     		str	r3, [r7, #36]
1018:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   gpio.Pull      = GPIO_NOPULL;
 1300              		.loc 1 1018 0
 1301 0022 0023     		movs	r3, #0
 1302 0024 3B62     		str	r3, [r7, #32]
1019:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   gpio.Pin       = MCO1_PIN;
 1303              		.loc 1 1019 0
 1304 0026 4FF48073 		mov	r3, #256
ARM GAS  C:\Users\MATEUS~1\AppData\Local\Temp\ccmMuE16.s 			page 42


 1305 002a BB61     		str	r3, [r7, #24]
 1306              	.LBB6:
1020:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
1021:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* MCO1 Clock Enable */
1022:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   MCO1_CLK_ENABLE();
 1307              		.loc 1 1022 0
 1308 002c 0E4A     		ldr	r2, .L96
 1309 002e 0E4B     		ldr	r3, .L96
 1310 0030 9B69     		ldr	r3, [r3, #24]
 1311 0032 43F00403 		orr	r3, r3, #4
 1312 0036 9361     		str	r3, [r2, #24]
 1313 0038 0B4B     		ldr	r3, .L96
 1314 003a 9B69     		ldr	r3, [r3, #24]
 1315 003c 03F00403 		and	r3, r3, #4
 1316 0040 7B61     		str	r3, [r7, #20]
 1317 0042 7B69     		ldr	r3, [r7, #20]
 1318              	.LBE6:
1023:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
1024:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
 1319              		.loc 1 1024 0
 1320 0044 07F11803 		add	r3, r7, #24
 1321 0048 1946     		mov	r1, r3
 1322 004a 0848     		ldr	r0, .L96+4
 1323 004c FFF7FEFF 		bl	HAL_GPIO_Init
1025:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
1026:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Configure the MCO clock source */
1027:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   __HAL_RCC_MCO1_CONFIG(RCC_MCOSource, RCC_MCODiv);
 1324              		.loc 1 1027 0
 1325 0050 0549     		ldr	r1, .L96
 1326 0052 054B     		ldr	r3, .L96
 1327 0054 5B68     		ldr	r3, [r3, #4]
 1328 0056 23F0E062 		bic	r2, r3, #117440512
 1329 005a BB68     		ldr	r3, [r7, #8]
 1330 005c 1343     		orrs	r3, r3, r2
 1331 005e 4B60     		str	r3, [r1, #4]
1028:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** }
 1332              		.loc 1 1028 0
 1333 0060 00BF     		nop
 1334 0062 2837     		adds	r7, r7, #40
 1335              	.LCFI18:
 1336              		.cfi_def_cfa_offset 8
 1337 0064 BD46     		mov	sp, r7
 1338              	.LCFI19:
 1339              		.cfi_def_cfa_register 13
 1340              		@ sp needed
 1341 0066 80BD     		pop	{r7, pc}
 1342              	.L97:
 1343              		.align	2
 1344              	.L96:
 1345 0068 00100240 		.word	1073876992
 1346 006c 00080140 		.word	1073809408
 1347              		.cfi_endproc
 1348              	.LFE67:
 1350              		.section	.text.HAL_RCC_EnableCSS,"ax",%progbits
 1351              		.align	2
 1352              		.global	HAL_RCC_EnableCSS
 1353              		.thumb
ARM GAS  C:\Users\MATEUS~1\AppData\Local\Temp\ccmMuE16.s 			page 43


 1354              		.thumb_func
 1356              	HAL_RCC_EnableCSS:
 1357              	.LFB68:
1029:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
1030:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** /**
1031:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @brief  Enables the Clock Security System.
1032:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @note   If a failure is detected on the HSE oscillator clock, this oscillator
1033:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *         is automatically disabled and an interrupt is generated to inform the
1034:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *         software about the failure (Clock Security System Interrupt, CSSI),
1035:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *         allowing the MCU to perform rescue operations. The CSSI is linked to 
1036:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *         the Cortex-M3 NMI (Non-Maskable Interrupt) exception vector.  
1037:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @retval None
1038:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   */
1039:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** void HAL_RCC_EnableCSS(void)
1040:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** {
 1358              		.loc 1 1040 0
 1359              		.cfi_startproc
 1360              		@ args = 0, pretend = 0, frame = 0
 1361              		@ frame_needed = 1, uses_anonymous_args = 0
 1362              		@ link register save eliminated.
 1363 0000 80B4     		push	{r7}
 1364              	.LCFI20:
 1365              		.cfi_def_cfa_offset 4
 1366              		.cfi_offset 7, -4
 1367 0002 00AF     		add	r7, sp, #0
 1368              	.LCFI21:
 1369              		.cfi_def_cfa_register 7
1041:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 1370              		.loc 1 1041 0
 1371 0004 034B     		ldr	r3, .L99
 1372 0006 0122     		movs	r2, #1
 1373 0008 1A60     		str	r2, [r3]
1042:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** }
 1374              		.loc 1 1042 0
 1375 000a 00BF     		nop
 1376 000c BD46     		mov	sp, r7
 1377              	.LCFI22:
 1378              		.cfi_def_cfa_register 13
 1379              		@ sp needed
 1380 000e 80BC     		pop	{r7}
 1381              	.LCFI23:
 1382              		.cfi_restore 7
 1383              		.cfi_def_cfa_offset 0
 1384 0010 7047     		bx	lr
 1385              	.L100:
 1386 0012 00BF     		.align	2
 1387              	.L99:
 1388 0014 4C004242 		.word	1111621708
 1389              		.cfi_endproc
 1390              	.LFE68:
 1392              		.section	.text.HAL_RCC_DisableCSS,"ax",%progbits
 1393              		.align	2
 1394              		.global	HAL_RCC_DisableCSS
 1395              		.thumb
 1396              		.thumb_func
 1398              	HAL_RCC_DisableCSS:
 1399              	.LFB69:
ARM GAS  C:\Users\MATEUS~1\AppData\Local\Temp\ccmMuE16.s 			page 44


1043:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
1044:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** /**
1045:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @brief  Disables the Clock Security System.
1046:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @retval None
1047:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   */
1048:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** void HAL_RCC_DisableCSS(void)
1049:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** {
 1400              		.loc 1 1049 0
 1401              		.cfi_startproc
 1402              		@ args = 0, pretend = 0, frame = 0
 1403              		@ frame_needed = 1, uses_anonymous_args = 0
 1404              		@ link register save eliminated.
 1405 0000 80B4     		push	{r7}
 1406              	.LCFI24:
 1407              		.cfi_def_cfa_offset 4
 1408              		.cfi_offset 7, -4
 1409 0002 00AF     		add	r7, sp, #0
 1410              	.LCFI25:
 1411              		.cfi_def_cfa_register 7
1050:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)DISABLE;
 1412              		.loc 1 1050 0
 1413 0004 034B     		ldr	r3, .L102
 1414 0006 0022     		movs	r2, #0
 1415 0008 1A60     		str	r2, [r3]
1051:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** }
 1416              		.loc 1 1051 0
 1417 000a 00BF     		nop
 1418 000c BD46     		mov	sp, r7
 1419              	.LCFI26:
 1420              		.cfi_def_cfa_register 13
 1421              		@ sp needed
 1422 000e 80BC     		pop	{r7}
 1423              	.LCFI27:
 1424              		.cfi_restore 7
 1425              		.cfi_def_cfa_offset 0
 1426 0010 7047     		bx	lr
 1427              	.L103:
 1428 0012 00BF     		.align	2
 1429              	.L102:
 1430 0014 4C004242 		.word	1111621708
 1431              		.cfi_endproc
 1432              	.LFE69:
 1434              		.section	.rodata
 1435              		.align	2
 1436              	.LC0:
 1437 0000 02       		.byte	2
 1438 0001 03       		.byte	3
 1439 0002 04       		.byte	4
 1440 0003 05       		.byte	5
 1441 0004 06       		.byte	6
 1442 0005 07       		.byte	7
 1443 0006 08       		.byte	8
 1444 0007 09       		.byte	9
 1445 0008 0A       		.byte	10
 1446 0009 0B       		.byte	11
 1447 000a 0C       		.byte	12
 1448 000b 0D       		.byte	13
ARM GAS  C:\Users\MATEUS~1\AppData\Local\Temp\ccmMuE16.s 			page 45


 1449 000c 0E       		.byte	14
 1450 000d 0F       		.byte	15
 1451 000e 10       		.byte	16
 1452 000f 10       		.byte	16
 1453              		.align	2
 1454              	.LC1:
 1455 0010 01       		.byte	1
 1456 0011 02       		.byte	2
 1457              		.section	.text.HAL_RCC_GetSysClockFreq,"ax",%progbits
 1458              		.align	2
 1459              		.global	HAL_RCC_GetSysClockFreq
 1460              		.thumb
 1461              		.thumb_func
 1463              	HAL_RCC_GetSysClockFreq:
 1464              	.LFB70:
1052:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
1053:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** /**
1054:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @brief  Returns the SYSCLK frequency     
1055:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @note   The system frequency computed by this function is not the real 
1056:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *         frequency in the chip. It is calculated based on the predefined 
1057:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *         constant and the selected clock source:
1058:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @note     If SYSCLK source is HSI, function returns values based on HSI_VALUE(*)
1059:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @note     If SYSCLK source is HSE, function returns a value based on HSE_VALUE
1060:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *           divided by PREDIV factor(**)
1061:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @note     If SYSCLK source is PLL, function returns a value based on HSE_VALUE
1062:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *           divided by PREDIV factor(**) or HSI_VALUE(*) multiplied by the PLL factor.
1063:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @note     (*) HSI_VALUE is a constant defined in stm32f1xx_hal_conf.h file (default value
1064:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *               8 MHz) but the real value may vary depending on the variations
1065:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *               in voltage and temperature.
1066:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @note     (**) HSE_VALUE is a constant defined in stm32f1xx_hal_conf.h file (default value
1067:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *                8 MHz), user has to ensure that HSE_VALUE is same as the real
1068:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *                frequency of the crystal used. Otherwise, this function may
1069:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *                have wrong result.
1070:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *                  
1071:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @note   The result of this function could be not correct when using fractional
1072:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *         value for HSE crystal.
1073:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *           
1074:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @note   This function can be used by the user application to compute the 
1075:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *         baud-rate for the communication peripherals or configure other parameters.
1076:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *           
1077:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @note   Each time SYSCLK changes, this function must be called to update the
1078:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *         right SYSCLK value. Otherwise, any configuration based on this function will be incorre
1079:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *         
1080:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @retval SYSCLK frequency
1081:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   */
1082:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** uint32_t HAL_RCC_GetSysClockFreq(void)
1083:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** {
 1465              		.loc 1 1083 0
 1466              		.cfi_startproc
 1467              		@ args = 0, pretend = 0, frame = 40
 1468              		@ frame_needed = 1, uses_anonymous_args = 0
 1469              		@ link register save eliminated.
 1470 0000 90B4     		push	{r4, r7}
 1471              	.LCFI28:
 1472              		.cfi_def_cfa_offset 8
 1473              		.cfi_offset 4, -8
 1474              		.cfi_offset 7, -4
ARM GAS  C:\Users\MATEUS~1\AppData\Local\Temp\ccmMuE16.s 			page 46


 1475 0002 8AB0     		sub	sp, sp, #40
 1476              	.LCFI29:
 1477              		.cfi_def_cfa_offset 48
 1478 0004 00AF     		add	r7, sp, #0
 1479              	.LCFI30:
 1480              		.cfi_def_cfa_register 7
1084:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** #if defined(RCC_CFGR2_PREDIV1SRC)
1085:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
1086:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
1087:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** #else
1088:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 1481              		.loc 1 1088 0
 1482 0006 2B4B     		ldr	r3, .L113
 1483 0008 3C1D     		adds	r4, r7, #4
 1484 000a 1868     		ldr	r0, [r3]	@ unaligned
 1485 000c 5968     		ldr	r1, [r3, #4]	@ unaligned
 1486 000e 9A68     		ldr	r2, [r3, #8]	@ unaligned
 1487 0010 DB68     		ldr	r3, [r3, #12]	@ unaligned
 1488 0012 0FC4     		stmia	r4!, {r0, r1, r2, r3}
1089:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** #if defined(RCC_CFGR2_PREDIV1)
1090:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
1091:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** #else
1092:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   const uint8_t aPredivFactorTable[2] = {1, 2};
 1489              		.loc 1 1092 0
 1490 0014 284A     		ldr	r2, .L113+4
 1491 0016 3B46     		mov	r3, r7
 1492 0018 1288     		ldrh	r2, [r2]	@ unaligned
 1493 001a 1A80     		strh	r2, [r3]	@ unaligned
1093:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** #endif /*RCC_CFGR2_PREDIV1*/
1094:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
1095:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** #endif
1096:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 1494              		.loc 1 1096 0
 1495 001c 0023     		movs	r3, #0
 1496 001e FB61     		str	r3, [r7, #28]
 1497 0020 0023     		movs	r3, #0
 1498 0022 BB61     		str	r3, [r7, #24]
 1499 0024 0023     		movs	r3, #0
 1500 0026 7B62     		str	r3, [r7, #36]
 1501 0028 0023     		movs	r3, #0
 1502 002a 7B61     		str	r3, [r7, #20]
1097:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   uint32_t sysclockfreq = 0U;
 1503              		.loc 1 1097 0
 1504 002c 0023     		movs	r3, #0
 1505 002e 3B62     		str	r3, [r7, #32]
1098:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** #if defined(RCC_CFGR2_PREDIV1SRC)
1099:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   uint32_t prediv2 = 0U, pll2mul = 0U;
1100:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** #endif /*RCC_CFGR2_PREDIV1SRC*/
1101:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
1102:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   tmpreg = RCC->CFGR;
 1506              		.loc 1 1102 0
 1507 0030 224B     		ldr	r3, .L113+8
 1508 0032 5B68     		ldr	r3, [r3, #4]
 1509 0034 FB61     		str	r3, [r7, #28]
1103:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
1104:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Get SYSCLK source -------------------------------------------------------*/
1105:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   switch (tmpreg & RCC_CFGR_SWS)
ARM GAS  C:\Users\MATEUS~1\AppData\Local\Temp\ccmMuE16.s 			page 47


 1510              		.loc 1 1105 0
 1511 0036 FB69     		ldr	r3, [r7, #28]
 1512 0038 03F00C03 		and	r3, r3, #12
 1513 003c 042B     		cmp	r3, #4
 1514 003e 02D0     		beq	.L106
 1515 0040 082B     		cmp	r3, #8
 1516 0042 03D0     		beq	.L107
 1517 0044 2DE0     		b	.L112
 1518              	.L106:
1106:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   {
1107:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
1108:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     {
1109:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       sysclockfreq = HSE_VALUE;
 1519              		.loc 1 1109 0
 1520 0046 1E4B     		ldr	r3, .L113+12
 1521 0048 3B62     		str	r3, [r7, #32]
1110:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       break;
 1522              		.loc 1 1110 0
 1523 004a 2DE0     		b	.L108
 1524              	.L107:
1111:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     }
1112:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
1113:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     {
1114:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 1525              		.loc 1 1114 0
 1526 004c FB69     		ldr	r3, [r7, #28]
 1527 004e 9B0C     		lsrs	r3, r3, #18
 1528 0050 03F00F03 		and	r3, r3, #15
 1529 0054 07F12802 		add	r2, r7, #40
 1530 0058 1344     		add	r3, r3, r2
 1531 005a 13F8243C 		ldrb	r3, [r3, #-36]	@ zero_extendqisi2
 1532 005e 7B61     		str	r3, [r7, #20]
1115:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 1533              		.loc 1 1115 0
 1534 0060 FB69     		ldr	r3, [r7, #28]
 1535 0062 03F48033 		and	r3, r3, #65536
 1536 0066 002B     		cmp	r3, #0
 1537 0068 13D0     		beq	.L109
1116:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       {
1117:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** #if defined(RCC_CFGR2_PREDIV1)
1118:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1
1119:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** #else
1120:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_
 1538              		.loc 1 1120 0
 1539 006a 144B     		ldr	r3, .L113+8
 1540 006c 5B68     		ldr	r3, [r3, #4]
 1541 006e 03F40033 		and	r3, r3, #131072
 1542 0072 5B0C     		lsrs	r3, r3, #17
 1543 0074 07F12802 		add	r2, r7, #40
 1544 0078 1344     		add	r3, r3, r2
 1545 007a 13F8283C 		ldrb	r3, [r3, #-40]	@ zero_extendqisi2
 1546 007e BB61     		str	r3, [r7, #24]
1121:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** #endif /*RCC_CFGR2_PREDIV1*/
1122:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** #if defined(RCC_CFGR2_PREDIV1SRC)
1123:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
1124:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         if(HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
1125:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         {
ARM GAS  C:\Users\MATEUS~1\AppData\Local\Temp\ccmMuE16.s 			page 48


1126:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           /* PLL2 selected as Prediv1 source */
1127:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
1128:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
1129:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
1130:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint
1131:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         }
1132:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         else
1133:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         {
1134:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
1135:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
1136:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         }
1137:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
1138:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using floa
1139:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         /* In this case need to divide pllclk by 2 */
1140:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
1141:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         {
1142:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****             pllclk = pllclk / 2;
1143:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         }
1144:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** #else
1145:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
1146:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 1547              		.loc 1 1146 0
 1548 0080 7B69     		ldr	r3, [r7, #20]
 1549 0082 0F4A     		ldr	r2, .L113+12
 1550 0084 02FB03F2 		mul	r2, r2, r3
 1551 0088 BB69     		ldr	r3, [r7, #24]
 1552 008a B2FBF3F3 		udiv	r3, r2, r3
 1553 008e 7B62     		str	r3, [r7, #36]
 1554 0090 04E0     		b	.L110
 1555              	.L109:
1147:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** #endif /*RCC_CFGR2_PREDIV1SRC*/
1148:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       }
1149:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       else
1150:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       {
1151:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
1152:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 1556              		.loc 1 1152 0
 1557 0092 7B69     		ldr	r3, [r7, #20]
 1558 0094 0B4A     		ldr	r2, .L113+16
 1559 0096 02FB03F3 		mul	r3, r2, r3
 1560 009a 7B62     		str	r3, [r7, #36]
 1561              	.L110:
1153:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       }
1154:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       sysclockfreq = pllclk;
 1562              		.loc 1 1154 0
 1563 009c 7B6A     		ldr	r3, [r7, #36]
 1564 009e 3B62     		str	r3, [r7, #32]
1155:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       break;
 1565              		.loc 1 1155 0
 1566 00a0 02E0     		b	.L108
 1567              	.L112:
1156:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     }
1157:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
1158:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     default: /* HSI used as system clock */
1159:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     {
1160:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       sysclockfreq = HSI_VALUE;
 1568              		.loc 1 1160 0
ARM GAS  C:\Users\MATEUS~1\AppData\Local\Temp\ccmMuE16.s 			page 49


 1569 00a2 074B     		ldr	r3, .L113+12
 1570 00a4 3B62     		str	r3, [r7, #32]
1161:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       break;
 1571              		.loc 1 1161 0
 1572 00a6 00BF     		nop
 1573              	.L108:
1162:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     }
1163:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   }
1164:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   return sysclockfreq;
 1574              		.loc 1 1164 0
 1575 00a8 3B6A     		ldr	r3, [r7, #32]
1165:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** }
 1576              		.loc 1 1165 0
 1577 00aa 1846     		mov	r0, r3
 1578 00ac 2837     		adds	r7, r7, #40
 1579              	.LCFI31:
 1580              		.cfi_def_cfa_offset 8
 1581 00ae BD46     		mov	sp, r7
 1582              	.LCFI32:
 1583              		.cfi_def_cfa_register 13
 1584              		@ sp needed
 1585 00b0 90BC     		pop	{r4, r7}
 1586              	.LCFI33:
 1587              		.cfi_restore 7
 1588              		.cfi_restore 4
 1589              		.cfi_def_cfa_offset 0
 1590 00b2 7047     		bx	lr
 1591              	.L114:
 1592              		.align	2
 1593              	.L113:
 1594 00b4 00000000 		.word	.LC0
 1595 00b8 10000000 		.word	.LC1
 1596 00bc 00100240 		.word	1073876992
 1597 00c0 00127A00 		.word	8000000
 1598 00c4 00093D00 		.word	4000000
 1599              		.cfi_endproc
 1600              	.LFE70:
 1602              		.section	.text.HAL_RCC_GetHCLKFreq,"ax",%progbits
 1603              		.align	2
 1604              		.global	HAL_RCC_GetHCLKFreq
 1605              		.thumb
 1606              		.thumb_func
 1608              	HAL_RCC_GetHCLKFreq:
 1609              	.LFB71:
1166:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
1167:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** /**
1168:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @brief  Returns the HCLK frequency     
1169:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @note   Each time HCLK changes, this function must be called to update the
1170:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *         right HCLK value. Otherwise, any configuration based on this function will be incorrect
1171:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * 
1172:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
1173:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *         and updated within this function
1174:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @retval HCLK frequency
1175:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   */
1176:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** uint32_t HAL_RCC_GetHCLKFreq(void)
1177:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** {
 1610              		.loc 1 1177 0
ARM GAS  C:\Users\MATEUS~1\AppData\Local\Temp\ccmMuE16.s 			page 50


 1611              		.cfi_startproc
 1612              		@ args = 0, pretend = 0, frame = 0
 1613              		@ frame_needed = 1, uses_anonymous_args = 0
 1614              		@ link register save eliminated.
 1615 0000 80B4     		push	{r7}
 1616              	.LCFI34:
 1617              		.cfi_def_cfa_offset 4
 1618              		.cfi_offset 7, -4
 1619 0002 00AF     		add	r7, sp, #0
 1620              	.LCFI35:
 1621              		.cfi_def_cfa_register 7
1178:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   return SystemCoreClock;
 1622              		.loc 1 1178 0
 1623 0004 024B     		ldr	r3, .L117
 1624 0006 1B68     		ldr	r3, [r3]
1179:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** }
 1625              		.loc 1 1179 0
 1626 0008 1846     		mov	r0, r3
 1627 000a BD46     		mov	sp, r7
 1628              	.LCFI36:
 1629              		.cfi_def_cfa_register 13
 1630              		@ sp needed
 1631 000c 80BC     		pop	{r7}
 1632              	.LCFI37:
 1633              		.cfi_restore 7
 1634              		.cfi_def_cfa_offset 0
 1635 000e 7047     		bx	lr
 1636              	.L118:
 1637              		.align	2
 1638              	.L117:
 1639 0010 00000000 		.word	SystemCoreClock
 1640              		.cfi_endproc
 1641              	.LFE71:
 1643              		.section	.text.HAL_RCC_GetPCLK1Freq,"ax",%progbits
 1644              		.align	2
 1645              		.global	HAL_RCC_GetPCLK1Freq
 1646              		.thumb
 1647              		.thumb_func
 1649              	HAL_RCC_GetPCLK1Freq:
 1650              	.LFB72:
1180:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
1181:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** /**
1182:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @brief  Returns the PCLK1 frequency     
1183:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @note   Each time PCLK1 changes, this function must be called to update the
1184:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrec
1185:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @retval PCLK1 frequency
1186:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   */
1187:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** uint32_t HAL_RCC_GetPCLK1Freq(void)
1188:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** {
 1651              		.loc 1 1188 0
 1652              		.cfi_startproc
 1653              		@ args = 0, pretend = 0, frame = 0
 1654              		@ frame_needed = 1, uses_anonymous_args = 0
 1655 0000 80B5     		push	{r7, lr}
 1656              	.LCFI38:
 1657              		.cfi_def_cfa_offset 8
 1658              		.cfi_offset 7, -8
ARM GAS  C:\Users\MATEUS~1\AppData\Local\Temp\ccmMuE16.s 			page 51


 1659              		.cfi_offset 14, -4
 1660 0002 00AF     		add	r7, sp, #0
 1661              	.LCFI39:
 1662              		.cfi_def_cfa_register 7
1189:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
1190:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos
 1663              		.loc 1 1190 0
 1664 0004 FFF7FEFF 		bl	HAL_RCC_GetHCLKFreq
 1665 0008 0146     		mov	r1, r0
 1666 000a 054B     		ldr	r3, .L121
 1667 000c 5B68     		ldr	r3, [r3, #4]
 1668 000e 03F4E063 		and	r3, r3, #1792
 1669 0012 1B0A     		lsrs	r3, r3, #8
 1670 0014 034A     		ldr	r2, .L121+4
 1671 0016 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 1672 0018 21FA03F3 		lsr	r3, r1, r3
1191:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** }    
 1673              		.loc 1 1191 0
 1674 001c 1846     		mov	r0, r3
 1675 001e 80BD     		pop	{r7, pc}
 1676              	.L122:
 1677              		.align	2
 1678              	.L121:
 1679 0020 00100240 		.word	1073876992
 1680 0024 00000000 		.word	APBPrescTable
 1681              		.cfi_endproc
 1682              	.LFE72:
 1684              		.section	.text.HAL_RCC_GetPCLK2Freq,"ax",%progbits
 1685              		.align	2
 1686              		.global	HAL_RCC_GetPCLK2Freq
 1687              		.thumb
 1688              		.thumb_func
 1690              	HAL_RCC_GetPCLK2Freq:
 1691              	.LFB73:
1192:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
1193:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** /**
1194:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @brief  Returns the PCLK2 frequency     
1195:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @note   Each time PCLK2 changes, this function must be called to update the
1196:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrec
1197:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @retval PCLK2 frequency
1198:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   */
1199:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** uint32_t HAL_RCC_GetPCLK2Freq(void)
1200:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** {
 1692              		.loc 1 1200 0
 1693              		.cfi_startproc
 1694              		@ args = 0, pretend = 0, frame = 0
 1695              		@ frame_needed = 1, uses_anonymous_args = 0
 1696 0000 80B5     		push	{r7, lr}
 1697              	.LCFI40:
 1698              		.cfi_def_cfa_offset 8
 1699              		.cfi_offset 7, -8
 1700              		.cfi_offset 14, -4
 1701 0002 00AF     		add	r7, sp, #0
 1702              	.LCFI41:
 1703              		.cfi_def_cfa_register 7
1201:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
1202:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]
ARM GAS  C:\Users\MATEUS~1\AppData\Local\Temp\ccmMuE16.s 			page 52


 1704              		.loc 1 1202 0
 1705 0004 FFF7FEFF 		bl	HAL_RCC_GetHCLKFreq
 1706 0008 0146     		mov	r1, r0
 1707 000a 054B     		ldr	r3, .L125
 1708 000c 5B68     		ldr	r3, [r3, #4]
 1709 000e 03F46053 		and	r3, r3, #14336
 1710 0012 DB0A     		lsrs	r3, r3, #11
 1711 0014 034A     		ldr	r2, .L125+4
 1712 0016 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 1713 0018 21FA03F3 		lsr	r3, r1, r3
1203:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** } 
 1714              		.loc 1 1203 0
 1715 001c 1846     		mov	r0, r3
 1716 001e 80BD     		pop	{r7, pc}
 1717              	.L126:
 1718              		.align	2
 1719              	.L125:
 1720 0020 00100240 		.word	1073876992
 1721 0024 00000000 		.word	APBPrescTable
 1722              		.cfi_endproc
 1723              	.LFE73:
 1725              		.section	.text.HAL_RCC_GetOscConfig,"ax",%progbits
 1726              		.align	2
 1727              		.global	HAL_RCC_GetOscConfig
 1728              		.thumb
 1729              		.thumb_func
 1731              	HAL_RCC_GetOscConfig:
 1732              	.LFB74:
1204:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
1205:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** /**
1206:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @brief  Configures the RCC_OscInitStruct according to the internal 
1207:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * RCC configuration registers.
1208:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @param  RCC_OscInitStruct pointer to an RCC_OscInitTypeDef structure that 
1209:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * will be configured.
1210:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @retval None
1211:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   */
1212:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** void HAL_RCC_GetOscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
1213:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** {
 1733              		.loc 1 1213 0
 1734              		.cfi_startproc
 1735              		@ args = 0, pretend = 0, frame = 8
 1736              		@ frame_needed = 1, uses_anonymous_args = 0
 1737              		@ link register save eliminated.
 1738 0000 80B4     		push	{r7}
 1739              	.LCFI42:
 1740              		.cfi_def_cfa_offset 4
 1741              		.cfi_offset 7, -4
 1742 0002 83B0     		sub	sp, sp, #12
 1743              	.LCFI43:
 1744              		.cfi_def_cfa_offset 16
 1745 0004 00AF     		add	r7, sp, #0
 1746              	.LCFI44:
 1747              		.cfi_def_cfa_register 7
 1748 0006 7860     		str	r0, [r7, #4]
1214:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Check the parameters */
1215:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   assert_param(RCC_OscInitStruct != NULL);
1216:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
ARM GAS  C:\Users\MATEUS~1\AppData\Local\Temp\ccmMuE16.s 			page 53


1217:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Set all possible values for the Oscillator type parameter ---------------*/
1218:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   RCC_OscInitStruct->OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI  \
 1749              		.loc 1 1218 0
 1750 0008 7B68     		ldr	r3, [r7, #4]
 1751 000a 0F22     		movs	r2, #15
 1752 000c 1A60     		str	r2, [r3]
1219:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****                   | RCC_OSCILLATORTYPE_LSE | RCC_OSCILLATORTYPE_LSI;
1220:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
1221:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** #if defined(RCC_CFGR2_PREDIV1SRC)
1222:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Get the Prediv1 source --------------------------------------------------*/
1223:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   RCC_OscInitStruct->Prediv1Source = READ_BIT(RCC->CFGR2,RCC_CFGR2_PREDIV1SRC);
1224:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** #endif /* RCC_CFGR2_PREDIV1SRC */
1225:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
1226:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Get the HSE configuration -----------------------------------------------*/
1227:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   if((RCC->CR &RCC_CR_HSEBYP) == RCC_CR_HSEBYP)
 1753              		.loc 1 1227 0
 1754 000e 3A4B     		ldr	r3, .L140
 1755 0010 1B68     		ldr	r3, [r3]
 1756 0012 03F48023 		and	r3, r3, #262144
 1757 0016 002B     		cmp	r3, #0
 1758 0018 04D0     		beq	.L128
1228:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   {
1229:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     RCC_OscInitStruct->HSEState = RCC_HSE_BYPASS;
 1759              		.loc 1 1229 0
 1760 001a 7B68     		ldr	r3, [r7, #4]
 1761 001c 4FF4A022 		mov	r2, #327680
 1762 0020 5A60     		str	r2, [r3, #4]
 1763 0022 0DE0     		b	.L129
 1764              	.L128:
1230:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   }
1231:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   else if((RCC->CR &RCC_CR_HSEON) == RCC_CR_HSEON)
 1765              		.loc 1 1231 0
 1766 0024 344B     		ldr	r3, .L140
 1767 0026 1B68     		ldr	r3, [r3]
 1768 0028 03F48033 		and	r3, r3, #65536
 1769 002c 002B     		cmp	r3, #0
 1770 002e 04D0     		beq	.L130
1232:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   {
1233:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     RCC_OscInitStruct->HSEState = RCC_HSE_ON;
 1771              		.loc 1 1233 0
 1772 0030 7B68     		ldr	r3, [r7, #4]
 1773 0032 4FF48032 		mov	r2, #65536
 1774 0036 5A60     		str	r2, [r3, #4]
 1775 0038 02E0     		b	.L129
 1776              	.L130:
1234:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   }
1235:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   else
1236:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   {
1237:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     RCC_OscInitStruct->HSEState = RCC_HSE_OFF;
 1777              		.loc 1 1237 0
 1778 003a 7B68     		ldr	r3, [r7, #4]
 1779 003c 0022     		movs	r2, #0
 1780 003e 5A60     		str	r2, [r3, #4]
 1781              	.L129:
1238:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   }
1239:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   RCC_OscInitStruct->HSEPredivValue = __HAL_RCC_HSE_GET_PREDIV();
 1782              		.loc 1 1239 0
ARM GAS  C:\Users\MATEUS~1\AppData\Local\Temp\ccmMuE16.s 			page 54


 1783 0040 2D4B     		ldr	r3, .L140
 1784 0042 5B68     		ldr	r3, [r3, #4]
 1785 0044 03F40032 		and	r2, r3, #131072
 1786 0048 7B68     		ldr	r3, [r7, #4]
 1787 004a 9A60     		str	r2, [r3, #8]
1240:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
1241:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Get the HSI configuration -----------------------------------------------*/
1242:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   if((RCC->CR &RCC_CR_HSION) == RCC_CR_HSION)
 1788              		.loc 1 1242 0
 1789 004c 2A4B     		ldr	r3, .L140
 1790 004e 1B68     		ldr	r3, [r3]
 1791 0050 03F00103 		and	r3, r3, #1
 1792 0054 002B     		cmp	r3, #0
 1793 0056 03D0     		beq	.L131
1243:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   {
1244:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     RCC_OscInitStruct->HSIState = RCC_HSI_ON;
 1794              		.loc 1 1244 0
 1795 0058 7B68     		ldr	r3, [r7, #4]
 1796 005a 0122     		movs	r2, #1
 1797 005c 1A61     		str	r2, [r3, #16]
 1798 005e 02E0     		b	.L132
 1799              	.L131:
1245:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   }
1246:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   else
1247:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   {
1248:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     RCC_OscInitStruct->HSIState = RCC_HSI_OFF;
 1800              		.loc 1 1248 0
 1801 0060 7B68     		ldr	r3, [r7, #4]
 1802 0062 0022     		movs	r2, #0
 1803 0064 1A61     		str	r2, [r3, #16]
 1804              	.L132:
1249:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   }
1250:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   
1251:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   RCC_OscInitStruct->HSICalibrationValue = (uint32_t)((RCC->CR & RCC_CR_HSITRIM) >> RCC_CR_HSITRIM_
 1805              		.loc 1 1251 0
 1806 0066 244B     		ldr	r3, .L140
 1807 0068 1B68     		ldr	r3, [r3]
 1808 006a 03F0F803 		and	r3, r3, #248
 1809 006e DA08     		lsrs	r2, r3, #3
 1810 0070 7B68     		ldr	r3, [r7, #4]
 1811 0072 5A61     		str	r2, [r3, #20]
1252:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   
1253:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Get the LSE configuration -----------------------------------------------*/
1254:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   if((RCC->BDCR &RCC_BDCR_LSEBYP) == RCC_BDCR_LSEBYP)
 1812              		.loc 1 1254 0
 1813 0074 204B     		ldr	r3, .L140
 1814 0076 1B6A     		ldr	r3, [r3, #32]
 1815 0078 03F00403 		and	r3, r3, #4
 1816 007c 002B     		cmp	r3, #0
 1817 007e 03D0     		beq	.L133
1255:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   {
1256:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     RCC_OscInitStruct->LSEState = RCC_LSE_BYPASS;
 1818              		.loc 1 1256 0
 1819 0080 7B68     		ldr	r3, [r7, #4]
 1820 0082 0522     		movs	r2, #5
 1821 0084 DA60     		str	r2, [r3, #12]
 1822 0086 0CE0     		b	.L134
ARM GAS  C:\Users\MATEUS~1\AppData\Local\Temp\ccmMuE16.s 			page 55


 1823              	.L133:
1257:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   }
1258:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   else if((RCC->BDCR &RCC_BDCR_LSEON) == RCC_BDCR_LSEON)
 1824              		.loc 1 1258 0
 1825 0088 1B4B     		ldr	r3, .L140
 1826 008a 1B6A     		ldr	r3, [r3, #32]
 1827 008c 03F00103 		and	r3, r3, #1
 1828 0090 002B     		cmp	r3, #0
 1829 0092 03D0     		beq	.L135
1259:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   {
1260:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     RCC_OscInitStruct->LSEState = RCC_LSE_ON;
 1830              		.loc 1 1260 0
 1831 0094 7B68     		ldr	r3, [r7, #4]
 1832 0096 0122     		movs	r2, #1
 1833 0098 DA60     		str	r2, [r3, #12]
 1834 009a 02E0     		b	.L134
 1835              	.L135:
1261:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   }
1262:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   else
1263:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   {
1264:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     RCC_OscInitStruct->LSEState = RCC_LSE_OFF;
 1836              		.loc 1 1264 0
 1837 009c 7B68     		ldr	r3, [r7, #4]
 1838 009e 0022     		movs	r2, #0
 1839 00a0 DA60     		str	r2, [r3, #12]
 1840              	.L134:
1265:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   }
1266:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   
1267:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Get the LSI configuration -----------------------------------------------*/
1268:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   if((RCC->CSR &RCC_CSR_LSION) == RCC_CSR_LSION)
 1841              		.loc 1 1268 0
 1842 00a2 154B     		ldr	r3, .L140
 1843 00a4 5B6A     		ldr	r3, [r3, #36]
 1844 00a6 03F00103 		and	r3, r3, #1
 1845 00aa 002B     		cmp	r3, #0
 1846 00ac 03D0     		beq	.L136
1269:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   {
1270:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     RCC_OscInitStruct->LSIState = RCC_LSI_ON;
 1847              		.loc 1 1270 0
 1848 00ae 7B68     		ldr	r3, [r7, #4]
 1849 00b0 0122     		movs	r2, #1
 1850 00b2 9A61     		str	r2, [r3, #24]
 1851 00b4 02E0     		b	.L137
 1852              	.L136:
1271:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   }
1272:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   else
1273:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   {
1274:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     RCC_OscInitStruct->LSIState = RCC_LSI_OFF;
 1853              		.loc 1 1274 0
 1854 00b6 7B68     		ldr	r3, [r7, #4]
 1855 00b8 0022     		movs	r2, #0
 1856 00ba 9A61     		str	r2, [r3, #24]
 1857              	.L137:
1275:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   }
1276:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   
1277:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
1278:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Get the PLL configuration -----------------------------------------------*/
ARM GAS  C:\Users\MATEUS~1\AppData\Local\Temp\ccmMuE16.s 			page 56


1279:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   if((RCC->CR &RCC_CR_PLLON) == RCC_CR_PLLON)
 1858              		.loc 1 1279 0
 1859 00bc 0E4B     		ldr	r3, .L140
 1860 00be 1B68     		ldr	r3, [r3]
 1861 00c0 03F08073 		and	r3, r3, #16777216
 1862 00c4 002B     		cmp	r3, #0
 1863 00c6 03D0     		beq	.L138
1280:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   {
1281:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     RCC_OscInitStruct->PLL.PLLState = RCC_PLL_ON;
 1864              		.loc 1 1281 0
 1865 00c8 7B68     		ldr	r3, [r7, #4]
 1866 00ca 0222     		movs	r2, #2
 1867 00cc DA61     		str	r2, [r3, #28]
 1868 00ce 02E0     		b	.L139
 1869              	.L138:
1282:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   }
1283:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   else
1284:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   {
1285:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     RCC_OscInitStruct->PLL.PLLState = RCC_PLL_OFF;
 1870              		.loc 1 1285 0
 1871 00d0 7B68     		ldr	r3, [r7, #4]
 1872 00d2 0122     		movs	r2, #1
 1873 00d4 DA61     		str	r2, [r3, #28]
 1874              	.L139:
1286:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   }
1287:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   RCC_OscInitStruct->PLL.PLLSource = (uint32_t)(RCC->CFGR & RCC_CFGR_PLLSRC);
 1875              		.loc 1 1287 0
 1876 00d6 084B     		ldr	r3, .L140
 1877 00d8 5B68     		ldr	r3, [r3, #4]
 1878 00da 03F48032 		and	r2, r3, #65536
 1879 00de 7B68     		ldr	r3, [r7, #4]
 1880 00e0 1A62     		str	r2, [r3, #32]
1288:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   RCC_OscInitStruct->PLL.PLLMUL = (uint32_t)(RCC->CFGR & RCC_CFGR_PLLMULL);
 1881              		.loc 1 1288 0
 1882 00e2 054B     		ldr	r3, .L140
 1883 00e4 5B68     		ldr	r3, [r3, #4]
 1884 00e6 03F47012 		and	r2, r3, #3932160
 1885 00ea 7B68     		ldr	r3, [r7, #4]
 1886 00ec 5A62     		str	r2, [r3, #36]
1289:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** #if defined(RCC_CR_PLL2ON)
1290:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Get the PLL2 configuration -----------------------------------------------*/
1291:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   if((RCC->CR &RCC_CR_PLL2ON) == RCC_CR_PLL2ON)
1292:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   {
1293:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     RCC_OscInitStruct->PLL2.PLL2State = RCC_PLL2_ON;
1294:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   }
1295:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   else
1296:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   {
1297:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     RCC_OscInitStruct->PLL2.PLL2State = RCC_PLL2_OFF;
1298:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   }
1299:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   RCC_OscInitStruct->PLL2.HSEPrediv2Value = __HAL_RCC_HSE_GET_PREDIV2();
1300:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   RCC_OscInitStruct->PLL2.PLL2MUL = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_PLL2MUL);
1301:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** #endif /* RCC_CR_PLL2ON */
1302:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** }
 1887              		.loc 1 1302 0
 1888 00ee 00BF     		nop
 1889 00f0 0C37     		adds	r7, r7, #12
 1890              	.LCFI45:
ARM GAS  C:\Users\MATEUS~1\AppData\Local\Temp\ccmMuE16.s 			page 57


 1891              		.cfi_def_cfa_offset 4
 1892 00f2 BD46     		mov	sp, r7
 1893              	.LCFI46:
 1894              		.cfi_def_cfa_register 13
 1895              		@ sp needed
 1896 00f4 80BC     		pop	{r7}
 1897              	.LCFI47:
 1898              		.cfi_restore 7
 1899              		.cfi_def_cfa_offset 0
 1900 00f6 7047     		bx	lr
 1901              	.L141:
 1902              		.align	2
 1903              	.L140:
 1904 00f8 00100240 		.word	1073876992
 1905              		.cfi_endproc
 1906              	.LFE74:
 1908              		.section	.text.HAL_RCC_GetClockConfig,"ax",%progbits
 1909              		.align	2
 1910              		.global	HAL_RCC_GetClockConfig
 1911              		.thumb
 1912              		.thumb_func
 1914              	HAL_RCC_GetClockConfig:
 1915              	.LFB75:
1303:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
1304:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** /**
1305:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @brief  Get the RCC_ClkInitStruct according to the internal 
1306:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * RCC configuration registers.
1307:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @param  RCC_ClkInitStruct pointer to an RCC_ClkInitTypeDef structure that 
1308:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * contains the current clock configuration.
1309:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @param  pFLatency Pointer on the Flash Latency.
1310:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @retval None
1311:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   */
1312:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
1313:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** {
 1916              		.loc 1 1313 0
 1917              		.cfi_startproc
 1918              		@ args = 0, pretend = 0, frame = 8
 1919              		@ frame_needed = 1, uses_anonymous_args = 0
 1920              		@ link register save eliminated.
 1921 0000 80B4     		push	{r7}
 1922              	.LCFI48:
 1923              		.cfi_def_cfa_offset 4
 1924              		.cfi_offset 7, -4
 1925 0002 83B0     		sub	sp, sp, #12
 1926              	.LCFI49:
 1927              		.cfi_def_cfa_offset 16
 1928 0004 00AF     		add	r7, sp, #0
 1929              	.LCFI50:
 1930              		.cfi_def_cfa_register 7
 1931 0006 7860     		str	r0, [r7, #4]
 1932 0008 3960     		str	r1, [r7]
1314:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Check the parameters */
1315:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   assert_param(RCC_ClkInitStruct != NULL);
1316:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   assert_param(pFLatency != NULL);
1317:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
1318:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Set all possible values for the Clock type parameter --------------------*/
1319:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | 
ARM GAS  C:\Users\MATEUS~1\AppData\Local\Temp\ccmMuE16.s 			page 58


 1933              		.loc 1 1319 0
 1934 000a 7B68     		ldr	r3, [r7, #4]
 1935 000c 0F22     		movs	r2, #15
 1936 000e 1A60     		str	r2, [r3]
1320:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   
1321:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Get the SYSCLK configuration --------------------------------------------*/ 
1322:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 1937              		.loc 1 1322 0
 1938 0010 114B     		ldr	r3, .L143
 1939 0012 5B68     		ldr	r3, [r3, #4]
 1940 0014 03F00302 		and	r2, r3, #3
 1941 0018 7B68     		ldr	r3, [r7, #4]
 1942 001a 5A60     		str	r2, [r3, #4]
1323:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   
1324:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Get the HCLK configuration ----------------------------------------------*/ 
1325:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 1943              		.loc 1 1325 0
 1944 001c 0E4B     		ldr	r3, .L143
 1945 001e 5B68     		ldr	r3, [r3, #4]
 1946 0020 03F0F002 		and	r2, r3, #240
 1947 0024 7B68     		ldr	r3, [r7, #4]
 1948 0026 9A60     		str	r2, [r3, #8]
1326:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   
1327:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Get the APB1 configuration ----------------------------------------------*/ 
1328:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 1949              		.loc 1 1328 0
 1950 0028 0B4B     		ldr	r3, .L143
 1951 002a 5B68     		ldr	r3, [r3, #4]
 1952 002c 03F4E062 		and	r2, r3, #1792
 1953 0030 7B68     		ldr	r3, [r7, #4]
 1954 0032 DA60     		str	r2, [r3, #12]
1329:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   
1330:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Get the APB2 configuration ----------------------------------------------*/ 
1331:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 1955              		.loc 1 1331 0
 1956 0034 084B     		ldr	r3, .L143
 1957 0036 5B68     		ldr	r3, [r3, #4]
 1958 0038 03F46053 		and	r3, r3, #14336
 1959 003c DA08     		lsrs	r2, r3, #3
 1960 003e 7B68     		ldr	r3, [r7, #4]
 1961 0040 1A61     		str	r2, [r3, #16]
1332:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   
1333:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** #if   defined(FLASH_ACR_LATENCY)
1334:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Get the Flash Wait State (Latency) configuration ------------------------*/   
1335:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 1962              		.loc 1 1335 0
 1963 0042 064B     		ldr	r3, .L143+4
 1964 0044 1B68     		ldr	r3, [r3]
 1965 0046 03F00702 		and	r2, r3, #7
 1966 004a 3B68     		ldr	r3, [r7]
 1967 004c 1A60     		str	r2, [r3]
1336:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** #else
1337:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* For VALUE lines devices, only LATENCY_0 can be set*/
1338:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *pFLatency = (uint32_t)FLASH_LATENCY_0; 
1339:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** #endif
1340:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** }
 1968              		.loc 1 1340 0
ARM GAS  C:\Users\MATEUS~1\AppData\Local\Temp\ccmMuE16.s 			page 59


 1969 004e 00BF     		nop
 1970 0050 0C37     		adds	r7, r7, #12
 1971              	.LCFI51:
 1972              		.cfi_def_cfa_offset 4
 1973 0052 BD46     		mov	sp, r7
 1974              	.LCFI52:
 1975              		.cfi_def_cfa_register 13
 1976              		@ sp needed
 1977 0054 80BC     		pop	{r7}
 1978              	.LCFI53:
 1979              		.cfi_restore 7
 1980              		.cfi_def_cfa_offset 0
 1981 0056 7047     		bx	lr
 1982              	.L144:
 1983              		.align	2
 1984              	.L143:
 1985 0058 00100240 		.word	1073876992
 1986 005c 00200240 		.word	1073881088
 1987              		.cfi_endproc
 1988              	.LFE75:
 1990              		.section	.text.HAL_RCC_NMI_IRQHandler,"ax",%progbits
 1991              		.align	2
 1992              		.global	HAL_RCC_NMI_IRQHandler
 1993              		.thumb
 1994              		.thumb_func
 1996              	HAL_RCC_NMI_IRQHandler:
 1997              	.LFB76:
1341:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
1342:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** /**
1343:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @brief This function handles the RCC CSS interrupt request.
1344:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @note This API should be called under the NMI_Handler().
1345:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @retval None
1346:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   */
1347:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** void HAL_RCC_NMI_IRQHandler(void)
1348:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** {
 1998              		.loc 1 1348 0
 1999              		.cfi_startproc
 2000              		@ args = 0, pretend = 0, frame = 0
 2001              		@ frame_needed = 1, uses_anonymous_args = 0
 2002 0000 80B5     		push	{r7, lr}
 2003              	.LCFI54:
 2004              		.cfi_def_cfa_offset 8
 2005              		.cfi_offset 7, -8
 2006              		.cfi_offset 14, -4
 2007 0002 00AF     		add	r7, sp, #0
 2008              	.LCFI55:
 2009              		.cfi_def_cfa_register 7
1349:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Check RCC CSSF flag  */
1350:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 2010              		.loc 1 1350 0
 2011 0004 064B     		ldr	r3, .L148
 2012 0006 9B68     		ldr	r3, [r3, #8]
 2013 0008 03F08003 		and	r3, r3, #128
 2014 000c 002B     		cmp	r3, #0
 2015 000e 04D0     		beq	.L147
1351:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   {
1352:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     /* RCC Clock Security System interrupt user callback */
ARM GAS  C:\Users\MATEUS~1\AppData\Local\Temp\ccmMuE16.s 			page 60


1353:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     HAL_RCC_CSSCallback();
 2016              		.loc 1 1353 0
 2017 0010 FFF7FEFF 		bl	HAL_RCC_CSSCallback
1354:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     
1355:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     /* Clear RCC CSS pending bit */
1356:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 2018              		.loc 1 1356 0
 2019 0014 034B     		ldr	r3, .L148+4
 2020 0016 8022     		movs	r2, #128
 2021 0018 1A70     		strb	r2, [r3]
 2022              	.L147:
1357:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   }
1358:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** }
 2023              		.loc 1 1358 0
 2024 001a 00BF     		nop
 2025 001c 80BD     		pop	{r7, pc}
 2026              	.L149:
 2027 001e 00BF     		.align	2
 2028              	.L148:
 2029 0020 00100240 		.word	1073876992
 2030 0024 0A100240 		.word	1073877002
 2031              		.cfi_endproc
 2032              	.LFE76:
 2034              		.section	.text.RCC_Delay,"ax",%progbits
 2035              		.align	2
 2036              		.thumb
 2037              		.thumb_func
 2039              	RCC_Delay:
 2040              	.LFB77:
1359:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
1360:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** /**
1361:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
1362:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @param  mdelay: specifies the delay time length, in milliseconds.
1363:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @retval None
1364:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   */
1365:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** static void RCC_Delay(uint32_t mdelay)
1366:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** {
 2041              		.loc 1 1366 0
 2042              		.cfi_startproc
 2043              		@ args = 0, pretend = 0, frame = 16
 2044              		@ frame_needed = 1, uses_anonymous_args = 0
 2045              		@ link register save eliminated.
 2046 0000 80B4     		push	{r7}
 2047              	.LCFI56:
 2048              		.cfi_def_cfa_offset 4
 2049              		.cfi_offset 7, -4
 2050 0002 85B0     		sub	sp, sp, #20
 2051              	.LCFI57:
 2052              		.cfi_def_cfa_offset 24
 2053 0004 00AF     		add	r7, sp, #0
 2054              	.LCFI58:
 2055              		.cfi_def_cfa_register 7
 2056 0006 7860     		str	r0, [r7, #4]
1367:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 2057              		.loc 1 1367 0
 2058 0008 0A4B     		ldr	r3, .L152
 2059 000a 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\MATEUS~1\AppData\Local\Temp\ccmMuE16.s 			page 61


 2060 000c 0A4A     		ldr	r2, .L152+4
 2061 000e A2FB0323 		umull	r2, r3, r2, r3
 2062 0012 5B0A     		lsrs	r3, r3, #9
 2063 0014 7A68     		ldr	r2, [r7, #4]
 2064 0016 02FB03F3 		mul	r3, r2, r3
 2065 001a FB60     		str	r3, [r7, #12]
 2066              	.L151:
 2067              	.LBB7:
 2068              	.LBB8:
 2069              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS Cortex-M Core Function/Instruction Header File
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V4.30
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     20. October 2015
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Copyright (c) 2009 - 2015 ARM LIMITED
   8:Drivers/CMSIS/Include/cmsis_gcc.h **** 
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****    All rights reserved.
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****    Redistribution and use in source and binary forms, with or without
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****    modification, are permitted provided that the following conditions are met:
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****    - Redistributions of source code must retain the above copyright
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****    - Redistributions in binary form must reproduce the above copyright
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer in the
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****      documentation and/or other materials provided with the distribution.
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****    - Neither the name of ARM nor the names of its contributors may be used
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****      to endorse or promote products derived from this software without
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****      specific prior written permission.
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****    *
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:Drivers/CMSIS/Include/cmsis_gcc.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  25:Drivers/CMSIS/Include/cmsis_gcc.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:Drivers/CMSIS/Include/cmsis_gcc.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:Drivers/CMSIS/Include/cmsis_gcc.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:Drivers/CMSIS/Include/cmsis_gcc.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:Drivers/CMSIS/Include/cmsis_gcc.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:Drivers/CMSIS/Include/cmsis_gcc.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:Drivers/CMSIS/Include/cmsis_gcc.h ****    POSSIBILITY OF SUCH DAMAGE.
  32:Drivers/CMSIS/Include/cmsis_gcc.h ****    ---------------------------------------------------------------------------*/
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  36:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined ( __GNUC__ )
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  41:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  44:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  47:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
ARM GAS  C:\Users\MATEUS~1\AppData\Local\Temp\ccmMuE16.s 			page 62


  48:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
  49:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
  51:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  53:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  54:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
  55:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
  57:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
  59:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  60:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  62:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
  66:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  67:Drivers/CMSIS/Include/cmsis_gcc.h ****   Can only be executed in Privileged modes.
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
  72:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  73:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  74:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  75:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register
  77:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
  78:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Control Register value
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  80:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_CONTROL(void)
  81:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
  83:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
  85:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  87:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  88:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  89:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
  93:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_CONTROL(uint32_t control)
  95:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
  97:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  98:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  99:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 100:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 101:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get IPSR Register
 102:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               IPSR Register value
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
ARM GAS  C:\Users\MATEUS~1\AppData\Local\Temp\ccmMuE16.s 			page 63


 105:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
 106:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 108:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 109:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 110:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 111:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 114:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 115:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get APSR Register
 116:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 117:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               APSR Register value
 118:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_APSR(void)
 120:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 121:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 122:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 123:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 124:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 125:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 126:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 127:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 128:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 129:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get xPSR Register
 130:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 131:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 132:Drivers/CMSIS/Include/cmsis_gcc.h ****     \return               xPSR Register value
 133:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_xPSR(void)
 135:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 137:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 141:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 142:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 143:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 144:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 145:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 146:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 148:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
 149:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 150:Drivers/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
 151:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 152:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 154:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 155:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 156:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 157:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 158:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 159:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 160:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 161:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
ARM GAS  C:\Users\MATEUS~1\AppData\Local\Temp\ccmMuE16.s 			page 64


 162:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
 163:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 164:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 165:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 168:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 169:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 170:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 171:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 172:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_MSP(void)
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 175:Drivers/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
 178:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 179:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 180:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 183:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 184:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 186:Drivers/CMSIS/Include/cmsis_gcc.h ****     \param [in]    topOfMainStack  Main Stack Pointer value to set
 187:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 188:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
 189:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 190:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
 191:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 192:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 193:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 194:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 195:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask
 196:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 197:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 198:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
 200:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 201:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 202:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 203:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) );
 204:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 205:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 206:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 207:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 208:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 209:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask
 210:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 211:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 212:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 213:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
 214:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 215:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 216:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 217:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 218:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  C:\Users\MATEUS~1\AppData\Local\Temp\ccmMuE16.s 			page 65


 219:Drivers/CMSIS/Include/cmsis_gcc.h **** #if       (__CORTEX_M >= 0x03U)
 220:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 221:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 222:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable FIQ
 223:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 224:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 225:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 226:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_fault_irq(void)
 227:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 228:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 229:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 230:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 231:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 232:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 233:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable FIQ
 234:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 235:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 236:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 237:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_fault_irq(void)
 238:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 239:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 240:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 241:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 242:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 243:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 244:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority
 245:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 246:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
 247:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 248:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
 249:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 250:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 251:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 252:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 253:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 254:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 255:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 256:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 257:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 258:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority
 259:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 260:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 261:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 262:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
 263:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 264:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 265:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 266:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 267:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 268:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 269:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 270:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 271:Drivers/CMSIS/Include/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 272:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 273:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 274:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI_MAX(uint32_t value)
 275:Drivers/CMSIS/Include/cmsis_gcc.h **** {
ARM GAS  C:\Users\MATEUS~1\AppData\Local\Temp\ccmMuE16.s 			page 66


 276:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (value) : "memory");
 277:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 278:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 279:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 280:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 281:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask
 282:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 283:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 284:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 285:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FAULTMASK(void)
 286:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 287:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 288:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 289:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 290:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 291:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 292:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 293:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 294:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 295:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Fault Mask
 296:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 297:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 298:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 299:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FAULTMASK(uint32_t faultMask)
 300:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 301:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 302:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 303:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 304:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* (__CORTEX_M >= 0x03U) */
 305:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 306:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 307:Drivers/CMSIS/Include/cmsis_gcc.h **** #if       (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U)
 308:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 309:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 310:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get FPSCR
 311:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 312:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 313:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 314:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FPSCR(void)
 315:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 316:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 317:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 318:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 319:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 320:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 321:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 322:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 323:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 324:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 325:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(0);
 326:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 327:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 328:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 329:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 330:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 331:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set FPSCR
 332:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
ARM GAS  C:\Users\MATEUS~1\AppData\Local\Temp\ccmMuE16.s 			page 67


 333:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 334:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 335:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FPSCR(uint32_t fpscr)
 336:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 337:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 338:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 339:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 340:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc");
 341:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 342:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 343:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 344:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 345:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U) */
 346:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 347:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 348:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 349:Drivers/CMSIS/Include/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 350:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 351:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 352:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 353:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 354:Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 355:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 356:Drivers/CMSIS/Include/cmsis_gcc.h **** */
 357:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 358:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 359:Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 360:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 361:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 362:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 363:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 364:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 365:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 366:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 367:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 368:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 369:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 370:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 371:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 372:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 373:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
 374:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 375:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("nop");
 2070              		.loc 2 375 0 discriminator 1
 2071              		.syntax unified
 2072              	@ 375 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 2073 001c 00BF     		nop
 2074              	@ 0 "" 2
 2075              		.thumb
 2076              		.syntax unified
 2077              	.LBE8:
 2078              	.LBE7:
1368:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   do 
1369:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   {
1370:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     __NOP();
1371:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   } 
1372:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   while (Delay --);
ARM GAS  C:\Users\MATEUS~1\AppData\Local\Temp\ccmMuE16.s 			page 68


 2079              		.loc 1 1372 0 discriminator 1
 2080 001e FB68     		ldr	r3, [r7, #12]
 2081 0020 5A1E     		subs	r2, r3, #1
 2082 0022 FA60     		str	r2, [r7, #12]
 2083 0024 002B     		cmp	r3, #0
 2084 0026 F9D1     		bne	.L151
1373:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** }
 2085              		.loc 1 1373 0
 2086 0028 00BF     		nop
 2087 002a 1437     		adds	r7, r7, #20
 2088              	.LCFI59:
 2089              		.cfi_def_cfa_offset 4
 2090 002c BD46     		mov	sp, r7
 2091              	.LCFI60:
 2092              		.cfi_def_cfa_register 13
 2093              		@ sp needed
 2094 002e 80BC     		pop	{r7}
 2095              	.LCFI61:
 2096              		.cfi_restore 7
 2097              		.cfi_def_cfa_offset 0
 2098 0030 7047     		bx	lr
 2099              	.L153:
 2100 0032 00BF     		.align	2
 2101              	.L152:
 2102 0034 00000000 		.word	SystemCoreClock
 2103 0038 D34D6210 		.word	274877907
 2104              		.cfi_endproc
 2105              	.LFE77:
 2107              		.section	.text.HAL_RCC_CSSCallback,"ax",%progbits
 2108              		.align	2
 2109              		.weak	HAL_RCC_CSSCallback
 2110              		.thumb
 2111              		.thumb_func
 2113              	HAL_RCC_CSSCallback:
 2114              	.LFB78:
1374:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
1375:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** /**
1376:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @brief  RCC Clock Security System interrupt callback
1377:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @retval none
1378:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   */
1379:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** __weak void HAL_RCC_CSSCallback(void)
1380:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** {
 2115              		.loc 1 1380 0
 2116              		.cfi_startproc
 2117              		@ args = 0, pretend = 0, frame = 0
 2118              		@ frame_needed = 1, uses_anonymous_args = 0
 2119              		@ link register save eliminated.
 2120 0000 80B4     		push	{r7}
 2121              	.LCFI62:
 2122              		.cfi_def_cfa_offset 4
 2123              		.cfi_offset 7, -4
 2124 0002 00AF     		add	r7, sp, #0
 2125              	.LCFI63:
 2126              		.cfi_def_cfa_register 7
1381:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
1382:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     the HAL_RCC_CSSCallback could be implemented in the user file
1383:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     */ 
ARM GAS  C:\Users\MATEUS~1\AppData\Local\Temp\ccmMuE16.s 			page 69


1384:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** }
 2127              		.loc 1 1384 0
 2128 0004 00BF     		nop
 2129 0006 BD46     		mov	sp, r7
 2130              	.LCFI64:
 2131              		.cfi_def_cfa_register 13
 2132              		@ sp needed
 2133 0008 80BC     		pop	{r7}
 2134              	.LCFI65:
 2135              		.cfi_restore 7
 2136              		.cfi_def_cfa_offset 0
 2137 000a 7047     		bx	lr
 2138              		.cfi_endproc
 2139              	.LFE78:
 2141              		.text
 2142              	.Letext0:
 2143              		.file 3 "c:\\program files (x86)\\gnu tools arm embedded\\5.4 2016q3\\arm-none-eabi\\include\\mach
 2144              		.file 4 "c:\\program files (x86)\\gnu tools arm embedded\\5.4 2016q3\\arm-none-eabi\\include\\sys\
 2145              		.file 5 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f103xb.h"
 2146              		.file 6 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f1xx.h"
 2147              		.file 7 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h"
 2148              		.file 8 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc.h"
 2149              		.file 9 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc_ex.h"
 2150              		.file 10 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_gpio.h"
 2151              		.file 11 "Drivers/CMSIS/Include/core_cm3.h"
 2152              		.file 12 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/system_stm32f1xx.h"
ARM GAS  C:\Users\MATEUS~1\AppData\Local\Temp\ccmMuE16.s 			page 70


DEFINED SYMBOLS
                            *ABS*:00000000 stm32f1xx_hal_rcc.c
C:\Users\MATEUS~1\AppData\Local\Temp\ccmMuE16.s:20     .text.HAL_RCC_DeInit:00000000 $t
C:\Users\MATEUS~1\AppData\Local\Temp\ccmMuE16.s:25     .text.HAL_RCC_DeInit:00000000 HAL_RCC_DeInit
C:\Users\MATEUS~1\AppData\Local\Temp\ccmMuE16.s:215    .text.HAL_RCC_DeInit:00000120 $d
C:\Users\MATEUS~1\AppData\Local\Temp\ccmMuE16.s:222    .text.HAL_RCC_OscConfig:00000000 $t
C:\Users\MATEUS~1\AppData\Local\Temp\ccmMuE16.s:227    .text.HAL_RCC_OscConfig:00000000 HAL_RCC_OscConfig
C:\Users\MATEUS~1\AppData\Local\Temp\ccmMuE16.s:2039   .text.RCC_Delay:00000000 RCC_Delay
C:\Users\MATEUS~1\AppData\Local\Temp\ccmMuE16.s:598    .text.HAL_RCC_OscConfig:00000264 $d
C:\Users\MATEUS~1\AppData\Local\Temp\ccmMuE16.s:603    .text.HAL_RCC_OscConfig:00000270 $t
C:\Users\MATEUS~1\AppData\Local\Temp\ccmMuE16.s:955    .text.HAL_RCC_OscConfig:000004bc $d
C:\Users\MATEUS~1\AppData\Local\Temp\ccmMuE16.s:962    .text.HAL_RCC_ClockConfig:00000000 $t
C:\Users\MATEUS~1\AppData\Local\Temp\ccmMuE16.s:967    .text.HAL_RCC_ClockConfig:00000000 HAL_RCC_ClockConfig
C:\Users\MATEUS~1\AppData\Local\Temp\ccmMuE16.s:1463   .text.HAL_RCC_GetSysClockFreq:00000000 HAL_RCC_GetSysClockFreq
C:\Users\MATEUS~1\AppData\Local\Temp\ccmMuE16.s:1254   .text.HAL_RCC_ClockConfig:000001d8 $d
C:\Users\MATEUS~1\AppData\Local\Temp\ccmMuE16.s:1262   .text.HAL_RCC_MCOConfig:00000000 $t
C:\Users\MATEUS~1\AppData\Local\Temp\ccmMuE16.s:1267   .text.HAL_RCC_MCOConfig:00000000 HAL_RCC_MCOConfig
C:\Users\MATEUS~1\AppData\Local\Temp\ccmMuE16.s:1345   .text.HAL_RCC_MCOConfig:00000068 $d
C:\Users\MATEUS~1\AppData\Local\Temp\ccmMuE16.s:1351   .text.HAL_RCC_EnableCSS:00000000 $t
C:\Users\MATEUS~1\AppData\Local\Temp\ccmMuE16.s:1356   .text.HAL_RCC_EnableCSS:00000000 HAL_RCC_EnableCSS
C:\Users\MATEUS~1\AppData\Local\Temp\ccmMuE16.s:1388   .text.HAL_RCC_EnableCSS:00000014 $d
C:\Users\MATEUS~1\AppData\Local\Temp\ccmMuE16.s:1393   .text.HAL_RCC_DisableCSS:00000000 $t
C:\Users\MATEUS~1\AppData\Local\Temp\ccmMuE16.s:1398   .text.HAL_RCC_DisableCSS:00000000 HAL_RCC_DisableCSS
C:\Users\MATEUS~1\AppData\Local\Temp\ccmMuE16.s:1430   .text.HAL_RCC_DisableCSS:00000014 $d
C:\Users\MATEUS~1\AppData\Local\Temp\ccmMuE16.s:1435   .rodata:00000000 $d
C:\Users\MATEUS~1\AppData\Local\Temp\ccmMuE16.s:1458   .text.HAL_RCC_GetSysClockFreq:00000000 $t
C:\Users\MATEUS~1\AppData\Local\Temp\ccmMuE16.s:1594   .text.HAL_RCC_GetSysClockFreq:000000b4 $d
C:\Users\MATEUS~1\AppData\Local\Temp\ccmMuE16.s:1603   .text.HAL_RCC_GetHCLKFreq:00000000 $t
C:\Users\MATEUS~1\AppData\Local\Temp\ccmMuE16.s:1608   .text.HAL_RCC_GetHCLKFreq:00000000 HAL_RCC_GetHCLKFreq
C:\Users\MATEUS~1\AppData\Local\Temp\ccmMuE16.s:1639   .text.HAL_RCC_GetHCLKFreq:00000010 $d
C:\Users\MATEUS~1\AppData\Local\Temp\ccmMuE16.s:1644   .text.HAL_RCC_GetPCLK1Freq:00000000 $t
C:\Users\MATEUS~1\AppData\Local\Temp\ccmMuE16.s:1649   .text.HAL_RCC_GetPCLK1Freq:00000000 HAL_RCC_GetPCLK1Freq
C:\Users\MATEUS~1\AppData\Local\Temp\ccmMuE16.s:1679   .text.HAL_RCC_GetPCLK1Freq:00000020 $d
C:\Users\MATEUS~1\AppData\Local\Temp\ccmMuE16.s:1685   .text.HAL_RCC_GetPCLK2Freq:00000000 $t
C:\Users\MATEUS~1\AppData\Local\Temp\ccmMuE16.s:1690   .text.HAL_RCC_GetPCLK2Freq:00000000 HAL_RCC_GetPCLK2Freq
C:\Users\MATEUS~1\AppData\Local\Temp\ccmMuE16.s:1720   .text.HAL_RCC_GetPCLK2Freq:00000020 $d
C:\Users\MATEUS~1\AppData\Local\Temp\ccmMuE16.s:1726   .text.HAL_RCC_GetOscConfig:00000000 $t
C:\Users\MATEUS~1\AppData\Local\Temp\ccmMuE16.s:1731   .text.HAL_RCC_GetOscConfig:00000000 HAL_RCC_GetOscConfig
C:\Users\MATEUS~1\AppData\Local\Temp\ccmMuE16.s:1904   .text.HAL_RCC_GetOscConfig:000000f8 $d
C:\Users\MATEUS~1\AppData\Local\Temp\ccmMuE16.s:1909   .text.HAL_RCC_GetClockConfig:00000000 $t
C:\Users\MATEUS~1\AppData\Local\Temp\ccmMuE16.s:1914   .text.HAL_RCC_GetClockConfig:00000000 HAL_RCC_GetClockConfig
C:\Users\MATEUS~1\AppData\Local\Temp\ccmMuE16.s:1985   .text.HAL_RCC_GetClockConfig:00000058 $d
C:\Users\MATEUS~1\AppData\Local\Temp\ccmMuE16.s:1991   .text.HAL_RCC_NMI_IRQHandler:00000000 $t
C:\Users\MATEUS~1\AppData\Local\Temp\ccmMuE16.s:1996   .text.HAL_RCC_NMI_IRQHandler:00000000 HAL_RCC_NMI_IRQHandler
C:\Users\MATEUS~1\AppData\Local\Temp\ccmMuE16.s:2113   .text.HAL_RCC_CSSCallback:00000000 HAL_RCC_CSSCallback
C:\Users\MATEUS~1\AppData\Local\Temp\ccmMuE16.s:2029   .text.HAL_RCC_NMI_IRQHandler:00000020 $d
C:\Users\MATEUS~1\AppData\Local\Temp\ccmMuE16.s:2035   .text.RCC_Delay:00000000 $t
C:\Users\MATEUS~1\AppData\Local\Temp\ccmMuE16.s:2102   .text.RCC_Delay:00000034 $d
C:\Users\MATEUS~1\AppData\Local\Temp\ccmMuE16.s:2108   .text.HAL_RCC_CSSCallback:00000000 $t
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.0.8e003669b0c71c0a33544209f61bc06c
                           .group:00000000 wm4.main.h.42.3e9602f258f21c216c24749e16771da2
                           .group:00000000 wm4.stm32f1xx_hal_conf.h.52.694831360934fa22cef97aea9ad52ec0
                           .group:00000000 wm4.stm32f1xx.h.57.c2a10934f4c6830aeb7e4997f02806f1
                           .group:00000000 wm4.stm32f103xb.h.56.66305a77cea9d5300aac997a78930076
                           .group:00000000 wm4._newlib_version.h.4.ad342815780c8db09778091a421b5b5b
                           .group:00000000 wm4.features.h.33.d97f2d646536517df901beeb5b9993f5
ARM GAS  C:\Users\MATEUS~1\AppData\Local\Temp\ccmMuE16.s 			page 71


                           .group:00000000 wm4._default_types.h.15.933e8edd27a65e0b69af4a865eb623d2
                           .group:00000000 wm4._intsup.h.10.b82bf99f69d6a5c085fc866de0d3eb9b
                           .group:00000000 wm4._stdint.h.10.7a5f60e6741af4a5594a3867d347e1f9
                           .group:00000000 wm4.stdint.h.23.373a9d32a9e4c2e88fd347156532d281
                           .group:00000000 wm4.core_cm3.h.74.7d5fecd6d4522d755d10a23d1542f805
                           .group:00000000 wm4.cmsis_gcc.h.36.67d2dcde6a14ff518eedc1d545d89a76
                           .group:00000000 wm4.core_cm3.h.175.a6c441adf1a05ce96eea3cf78e6687ab
                           .group:00000000 wm4.stm32f103xb.h.619.382b3c85cac6f0350ee5bfaff32e1ebc
                           .group:00000000 wm4.stm32f1xx.h.180.c0013e6ebd6ad07f67c298190b8eac92
                           .group:00000000 wm4.newlib.h.8.36dd0417407b0a085bc04c49cc2ed13a
                           .group:00000000 wm4.config.h.219.65a553ab5bef5482f0d7880b0d33015e
                           .group:00000000 wm4._ansi.h.23.9f8fcfa20193763fcf364fb91705c94b
                           .group:00000000 wm4.stdio.h.31.7c0e28c411445f3f9c5b11accf882760
                           .group:00000000 wm4.stddef.h.187.2ff233552538c6ff9b8575ca8ea52cb3
                           .group:00000000 wm4.cdefs.h.47.ba62642086d429b4f95c2381cae1c0aa
                           .group:00000000 wm4.stddef.h.39.ec95e8feac892e292b69dc7ae75b0d64
                           .group:00000000 wm4.stdarg.h.34.3a23a216c0c293b3d2ea2e89281481e6
                           .group:00000000 wm4.lock.h.2.9bc98482741e5e2a9450b12934a684ea
                           .group:00000000 wm4._types.h.125.5cf8a495f1f7ef36777ad868a1e32068
                           .group:00000000 wm4.stddef.h.161.5349cb105733e8777bfb0cf53c4e3f34
                           .group:00000000 wm4._types.h.183.c226d164ceca1f2ecb9ae9360c54a098
                           .group:00000000 wm4.reent.h.17.23b059516345f8f5abfa01ddc379570f
                           .group:00000000 wm4.types.h.40.e8c16e7ec36ba55f133d0616070e25fc
                           .group:00000000 wm4._endian.h.31.65a10590763c3dde1ac4a7f66d7d4891
                           .group:00000000 wm4.endian.h.9.49f3a4695c1b61e8a0808de3c4a106cb
                           .group:00000000 wm4._timeval.h.30.0e8bfd94e85db17dda3286ee81496fe6
                           .group:00000000 wm4.timespec.h.41.d855182eb0e690443ab8651bcedca6e1
                           .group:00000000 wm4.select.h.30.bbece7fa40993a78092dcc5805132560
                           .group:00000000 wm4.types.h.69.ed3eae3cf73030a737515151ebcab7a1
                           .group:00000000 wm4.stdio.h.2.4aa87247282eca6c8f36f9de33d8df1a
                           .group:00000000 wm4.stdio.h.81.8188691c2279eac7a223caa50f6694b9
                           .group:00000000 wm4.stm32f1xx_hal_def.h.75.49f74f1b76b21b32115f01d919dedfe9
                           .group:00000000 wm4.stm32f1xx_hal_rcc.h.110.e8776981928b0b5f4b34a0798958a52d
                           .group:00000000 wm4.stm32f1xx_hal_rcc_ex.h.38.d69020e892acea139e28d501e199a898
                           .group:00000000 wm4.stm32f1xx_hal_rcc.h.1217.4363bfbab2bddd7821442b2bd7309b62
                           .group:00000000 wm4.stm32f1xx_hal_gpio.h.38.154e4ee32f1e606c3d2bf481de68fa8f
                           .group:00000000 wm4.stm32f1xx_hal_gpio_ex.h.38.b1760b0a36205a773f96b64105bf573b
                           .group:00000000 wm4.stm32f1xx_hal_gpio.h.279.f7fb4bf14b992a51de3ea5920d36cbc8
                           .group:00000000 wm4.stm32f1xx_hal_dma.h.38.7ba73d8fbb5802987cd3c94d3cb2acfc
                           .group:00000000 wm4.stm32f1xx_hal_dma_ex.h.38.c1f016a34e6785541786945b74870a35
                           .group:00000000 wm4.stm32f1xx_hal_dma.h.425.ea703e7b8c2a94afae7354b55b709b4c
                           .group:00000000 wm4.stm32f1xx_hal_cortex.h.38.886490b3101139066008b34124bf11c4
                           .group:00000000 wm4.stm32f1xx_hal_flash.h.38.bef5191653b2e1c62feeefaeb5a5cc36
                           .group:00000000 wm4.stm32f1xx_hal_flash_ex.h.38.e594fb3e52b67489b87423fe0ced0812
                           .group:00000000 wm4.stm32f1xx_hal_pwr.h.38.f2410f2a88433ca6e6e66491f47a406f
                           .group:00000000 wm4.stm32f1xx_hal.h.101.c80f672c38b2f88a7deb75929f9f6bbe

UNDEFINED SYMBOLS
HAL_GetTick
HAL_InitTick
SystemCoreClock
AHBPrescTable
HAL_GPIO_Init
APBPrescTable
